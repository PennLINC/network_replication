knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
require(ggplot2)
library(cowplot)
library(cifti)
library(ggseg)
Sys.setenv(RGL_USE_NULL=TRUE)
library(ggsegExtra)
library(ggsegGordon)
library(ggcorrplot)
library(viridis)
library(scales)
library(stringr)
library(tidyr)
knitr::opts_chunk$set(echo = TRUE)
library(ciftiTools)
ciftiTools.setOption('wb_path', '/Applications/workbench/')
library(gifti)
library(cifti)
Sys.setenv(RGL_USE_NULL=TRUE)
library(ggseg)
library(ggsegExtra)
library(ggsegGlasser)
library(ggsegSchaefer)
library(viridis)
require(ggplot2)
library(dplyr)
gordon_pconn <- read_cifti("/cbica/projects/network_replication/pconn/sub-1786758517/sub-1786758517_ses-PNC1_task-rest_acq-singleband_space-fsLR_atlas-Gordon_den-91k_den-91k_bold.pconn.nii")
knitr::opts_chunk$set(echo = TRUE)
library(ciftiTools)
ciftiTools.setOption('wb_path', '/Applications/workbench/')
library(gifti)
library(cifti)
Sys.setenv(RGL_USE_NULL=TRUE)
library(ggseg)
library(ggsegExtra)
library(ggsegGlasser)
library(ggsegSchaefer)
library(viridis)
require(ggplot2)
library(dplyr)
gordon_pconn <- read_cifti("/cbica/projects/network_replication/pconn/sub-1786758517/sub-1786758517_ses-PNC1_task-rest_acq-singleband_space-fsLR_atlas-Gordon_den-91k_den-91k_bold.pconn.nii")
x <- read_cift("/Users/audluo/Downloads/Parcels/Parcels_LR.dlabel.nii")
x <- read_cifti("/Users/audluo/Downloads/Parcels/Parcels_LR.dlabel.nii")
names(x)
x$data
x$surf
x$meta
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
require(ggplot2)
library(cowplot)
library(cifti)
library(ggseg)
Sys.setenv(RGL_USE_NULL=TRUE)
library(ggsegExtra)
library(ggsegGordon)
library(ggcorrplot)
library(viridis)
library(scales)
library(stringr)
library(tidyr)
# load SNR mask
SNRmask_gordon <- read.csv('/cbica/projects/network_replication/atlases/Masks/SNRmask_gordon.csv')
# load region list
gordon.parcel.labels <- read.csv("/cbica/projects/network_replication/atlases/parcellations/gordon_regionlist.csv", header = T)
names(gordon.parcel.labels) <- c("orig_parcelname", "label")
gordon.parcel.labels[which(SNRmask_gordon == 0),] <- NA # apply SNR mask to parcel names
gordon.parcel.labels <- na.omit(gordon.parcel.labels)
# load parcellated SA axis
gordon_SAaxis_cifti <- read_cifti("/Users/audluo/cbica/projects/network_replication/SAaxis/SensorimotorAssociation_Axis_parcellated/SensorimotorAssociation.Axis.Gordon333.pscalar.nii")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
require(ggplot2)
library(cowplot)
library(cifti)
library(ggseg)
Sys.setenv(RGL_USE_NULL=TRUE)
library(ggsegExtra)
library(ggsegGordon)
library(ggcorrplot)
library(viridis)
library(scales)
library(stringr)
library(tidyr)
# load SNR mask
SNRmask_gordon <- read.csv('/cbica/projects/network_replication/atlases/Masks/SNRmask_gordon.csv')
# load region list
gordon.parcel.labels <- read.csv("/cbica/projects/network_replication/atlases/parcellations/gordon_regionlist.csv", header = T)
names(gordon.parcel.labels) <- c("orig_parcelname", "label")
gordon.parcel.labels[which(SNRmask_gordon == 0),] <- NA # apply SNR mask to parcel names
gordon.parcel.labels <- na.omit(gordon.parcel.labels)
# load parcellated SA axis
gordon_SAaxis_cifti <- read_cifti("/Users/audluo/cbica/projects/network_replication/SAaxis/SensorimotorAssociation_Axis_parcellated/SensorimotorAssociation.Axis.Gordon333.pscalar.nii")
gordon_SAaxis <- as.data.frame(cbind(rank(gordon_SAaxis_cifti$data), names(gordon_SAaxis_cifti$Parcel)))
colnames(gordon_SAaxis) <- c("SA.axis_rank","label")
# apply SNR mask
gordon_SAaxis[which(SNRmask_gordon == 0),] <- NA
gordon_SAaxis <- na.omit(gordon_SAaxis)
## GAM Results
gam.gbc.age.gordon <- read.csv("/Users/audluo/cbica/projects/network_replication/GAM/GAMresults.GBC.age.gordon.csv")
gam.gbc.age.gordon <- gam.gbc.age.gordon %>% select(-label)
gam.gbc.age.gordon$label <- gordon_SAaxis$label
gam.smooths.gordon <- read.csv("/Users/audluo/cbica/projects/network_replication/GAM/GAMsmoothfits.GBC.age.gordon.csv")
gam.smooths.gordon$orig_parcelname <- gam.smooths.gordon$label
gam.agepeaks.gordon <- read.csv("/Users/audluo/cbica/projects/network_replication/GAM/GAMpeaks.GBC.age.gordon.csv")
gam.agepeaks.gordon <- gam.agepeaks.gordon %>% select(-label)
gam.agepeaks.gordon$label <- gordon.parcel.labels$label
# Combine into Final Dfs
df.list <- list(gordon_SAaxis,gam.gbc.age.gordon)
gbc.axis <- Reduce(function(x,y) merge(x,y, all=TRUE, sort=F), df.list)
gbc.axis$SA.axis_rank <- as.numeric(gbc.axis$SA.axis_rank)
a <- merge(gordon.parcel.labels, gordon_SAaxis, by="label", sort=F)
gam.smooths.gordon <- left_join(gam.smooths.gordon, a, by = "label")
gam.smooths.gordon$SA.axis_rank <-as.numeric(gam.smooths.gordon$SA.axis_rank)
gam.agepeaks.gordon <- left_join(gam.agepeaks.gordon, gordon_SAaxis, by="label")
gam.agepeaks.gordon$SA.axis_rank <-as.numeric(gam.agepeaks.gordon$SA.axis_rank)
gbc.axis$Anova.age.pvalue.fdr <- p.adjust(gbc.axis$Anova.age.pvalue, method=c("fdr"))
cat(sprintf("There are %s/%s significant parcels", sum(gbc.axis$Anova.age.pvalue.fdr < 0.05), nrow(gbc.axis)))
gbc.axis$significant.fdr <- gbc.axis$Anova.age.pvalue.fdr < 0.05
gbc.axis$significant.fdr[gbc.axis$significant.fdr == TRUE] <- 1
gbc.axis$significant.fdr[gbc.axis$significant.fdr == FALSE] <- 0
cor.test(gbc.axis$GAM.age.AdjRsq, as.numeric(gbc.axis$SA.axis_rank), method=c("spearman"), exact=F)
(gordon_agepeak <- ggplot() + geom_brain(data=gam.agepeaks.gordon,
atlas=schaefer17_200,
mapping=aes(fill=age.peak),
show.legend=TRUE,
position = position_brain(hemi ~ side)) +
scale_fill_gradientn(colors = viridis_pal(option="B")(10)) + theme_void())
(gordon_agepeak <- ggplot() + geom_brain(data=gam.agepeaks.gordon,
atlas=gordon,
mapping=aes(fill=age.peak),
show.legend=TRUE,
position = position_brain(hemi ~ side)) +
scale_fill_gradientn(colors = viridis_pal(option="B")(10)) + theme_void())
plot(gordon) +
theme(legend.position = "bottom",
legend.text = element_text(size = 9)) +
guides(fill = guide_legend(ncol = 7))
knitr::opts_chunk$set(echo = TRUE)
library(ciftiTools)
ciftiTools.setOption('wb_path', '/Applications/workbench/')
library(gifti)
library(cifti)
library(dplyr)
schaefer400.parcel.labels <- read.csv("/cbica/projects/network_replication/atlases/parcellations/schaefer400_regionlist.csv", header = T)
names(schaefer400.parcel.labels)[2] <- "labels"
schaefer200.parcel.labels <- read.csv("/cbica/projects/network_replication/atlases/parcellations/schaefer200_regionlist.csv", header = T)
names(schaefer200.parcel.labels)[2] <- "labels"
glasser.parcel.labels <- read.csv("/cbica/projects/network_replication/atlases/parcellations/glasser360_regionlist.csv", header = T)
names(glasser.parcel.labels)[2] <- "labels"
gordon.parcel.labels <- read.csv("/cbica/projects/network_replication/atlases/parcellations/gordon_regionlist.csv", header = T)
names(gordon.parcel.labels)[2] <- "labels"
#list of RBC-PNC ids with processed rest-task_acq-singleband data to compute GBC on
participants.RBC <- read.csv("/cbica/projects/network_replication/PNC/bblid_scanid_sub.csv", header=T) # not sure if this is the right participant list since the subject #'s in pconn are not identical to this list!
participants.RBC$rbcid <- paste("sub", participants.RBC$rbcid, sep="-")
participants.adam <- read.table("/cbica/projects/network_replication/PNC/participants.txt", header=F)
names(participants.adam) <- "scanid"
pconn.participants <- read.csv("/cbica/projects/network_replication/adapted_Rscripts/pconn_participants.csv")
pconn.participants <- as.data.frame(pconn.participants[,-c(which(names(pconn.participants) == c("X.1","X")))])
names(pconn.participants) <- "rbcid"
#to_exclude <- setdiff(as.character(participants.RBC$rbcid), as.character(pconn.participants$rbcid)) #these are the participants that are in Adam's list but not in my pconn directory. so need to exclude these
#get the row indices to remove from 'participants' df
#y <- c()
#for(i in 1:length(to_exclude)){
#  x <- which(participants.RBC$rbcid == to_exclude[i])
#  y <- append(y, x)
#}
#participants_rbcid.scanid <- participants.RBC[-y, ]
participants <- merge(participants.adam, participants.RBC, by="scanid")
#write.csv(participants, 'participants_allIDs.csv')
participants
knitr::opts_chunk$set(echo = TRUE)
library(ciftiTools)
ciftiTools.setOption('wb_path', '/Applications/workbench/')
library(gifti)
library(cifti)
Sys.setenv(RGL_USE_NULL=TRUE)
library(ggseg)
library(ggsegExtra)
library(ggsegGlasser)
library(ggsegSchaefer)
library(viridis)
require(ggplot2)
library(dplyr)
SNRmask_glasser <- read.csv('/cbica/projects/network_replication/atlases/Masks/SNRmask_glasser360.csv')
SNRmask_schaefer400 <- read.csv('/cbica/projects/network_replication/atlases/Masks/SNRmask_schaefer400.csv')
SNRmask_schaefer200 <- read.csv('/cbica/projects/network_replication/atlases/Masks/SNRmask_schaefer200.csv')
SNRmask_gordon <- read.csv('/cbica/projects/network_replication/atlases/Masks/SNRmask_gordon.csv')
computeGBC <- function(rbcid, atlas){
#read in connectivity matrix
if(atlas == "schaefer200"){
connect.matrix <- read_cifti(sprintf("/cbica/projects/network_replication/pconn/%1$s/%1$s_ses-PNC1_task-rest_acq-singleband_space-fsLR_atlas-Schaefer217_den-91k_den-91k_bold.pconn.nii",rbcid))
mask <- SNRmask_schaefer200} #200 x 200 matrix
if(atlas == "schaefer400"){
connect.matrix <- read_cifti(sprintf("/cbica/projects/network_replication/pconn/%1$s/%1$s_ses-PNC1_task-rest_acq-singleband_space-fsLR_atlas-Schaefer417_den-91k_den-91k_bold.pconn.nii",rbcid))
mask <- SNRmask_schaefer400} #400 x 400 matrix
if(atlas == "glasser"){
connect.matrix <- read_cifti(sprintf("/cbica/projects/network_replication/pconn/%1$s/%1$s_ses-PNC1_task-rest_acq-singleband_space-fsLR_atlas-Glasser_den-91k_den-91k_bold.pconn.nii",rbcid))
mask <- SNRmask_glasser} #360 x 360 matrix
if(atlas == "gordon"){
connect.matrix <- read_cifti(sprintf("/cbica/projects/network_replication/pconn/%1$s/%1$s_ses-PNC1_task-rest_acq-singleband_space-fsLR_atlas-Gordon_den-91k_den-91k_bold.pconn.nii",rbcid))
mask <- SNRmask_gordon}
# set rows and columns corresponding to parcel # in mask to NA
connect.matrix$data[which(mask == 0), ] <- NA
connect.matrix$data[,which(mask == 0)] <- NA
#compute average connectivity
GBC <- as.array(rowMeans(connect.matrix$data, na.rm = TRUE))
return(GBC)
}
SNRmask_glasser <- read.csv('/cbica/projects/network_replication/atlases/Masks/SNRmask_glasser360.csv')
computeGBC <- function(rbcid, atlas){
#read in connectivity matrix
if(atlas == "glasser"){
connect.matrix <- read_cifti(sprintf("/cbica/projects/network_replication/pconn/%1$s/%1$s_ses-PNC1_task-rest_acq-singleband_space-fsLR_atlas-Glasser_den-91k_den-91k_bold.pconn.nii",rbcid))
mask <- SNRmask_glasser} #360 x 360 matrix
# set rows and columns corresponding to parcel # in mask to NA
connect.matrix$data[which(mask == 0), ] <- NA
connect.matrix$data[,which(mask == 0)] <- NA
#compute average connectivity
GBC <- as.array(rowMeans(connect.matrix$data, na.rm = TRUE))
return(GBC)
}
GBC
participants <- read.csv('/Users/audreyluo/cbica/projects/network_replication/dropbox/adapted_Rscripts/participants_allIDs.csv')
participants <- read.csv('/cbica/projects/network_replication/adapted_Rscripts/participants_allIDs.csv')
GBC.subxparcel.matrix.glasser <- matrix(data = NA, nrow = nrow(participants), ncol = 361)
regionheaders <- as.character(glasser.parcel.labels$label)
demoheaders <- c("rbcid")
colheaders <- as.matrix(c(demoheaders,regionheaders))
colnames(GBC.subxparcel.matrix.glasser) <- colheaders
#compute GBC for each subject for all 4 atlases
for(sub in c(1:nrow(participants))){
rbcid=as.character(participants[sub,4])
if(rbcid %in% subs_no_files){
next
}
else {
rbcid.data.glasser <- computeGBC(rbcid, "glasser")
GBC.subxparcel.matrix.glasser[sub,] <- cbind(rbcid, t(rbcid.data.glasser))
print(paste(rbcid, "glasser"))
}
}
SNRmask_glasser <- read.csv('/cbica/projects/network_replication/atlases/Masks/SNRmask_glasser360.csv')
computeGBC <- function(rbcid, atlas){
#read in connectivity matrix
if(atlas == "glasser"){
connect.matrix <- read_cifti(sprintf("/cbica/projects/network_replication/pconn/%1$s/%1$s_ses-PNC1_task-rest_acq-singleband_space-fsLR_atlas-Glasser_den-91k_den-91k_bold.pconn.nii",rbcid))
mask <- SNRmask_glasser} #360 x 360 matrix
# set rows and columns corresponding to parcel # in mask to NA
connect.matrix$data[which(mask == 0), ] <- NA
connect.matrix$data[,which(mask == 0)] <- NA
#compute average connectivity
GBC <- as.array(rowMeans(connect.matrix$data, na.rm = TRUE))
return(GBC)
}
participants <- read.csv('/cbica/projects/network_replication/adapted_Rscripts/participants_allIDs.csv')
subs_no_files <- read.csv('/cbica/projects/network_replication/adapted_Rscripts/subs_no_files.csv')
GBC.subxparcel.matrix.glasser <- matrix(data = NA, nrow = nrow(participants), ncol = 361)
regionheaders <- as.character(glasser.parcel.labels$label)
glasser.parcel.labels <- read.csv("/cbica/projects/network_replication/atlases/parcellations/glasser360_regionlist.csv", header = T)
names(glasser.parcel.labels)[2] <- "labels"
SNRmask_glasser <- read.csv('/cbica/projects/network_replication/atlases/Masks/SNRmask_glasser360.csv')
computeGBC <- function(rbcid, atlas){
#read in connectivity matrix
if(atlas == "glasser"){
connect.matrix <- read_cifti(sprintf("/cbica/projects/network_replication/pconn/%1$s/%1$s_ses-PNC1_task-rest_acq-singleband_space-fsLR_atlas-Glasser_den-91k_den-91k_bold.pconn.nii",rbcid))
mask <- SNRmask_glasser} #360 x 360 matrix
# set rows and columns corresponding to parcel # in mask to NA
connect.matrix$data[which(mask == 0), ] <- NA
connect.matrix$data[,which(mask == 0)] <- NA
#compute average connectivity
GBC <- as.array(rowMeans(connect.matrix$data, na.rm = TRUE))
return(GBC)
}
participants <- read.csv('/cbica/projects/network_replication/adapted_Rscripts/participants_allIDs.csv')
subs_no_files <- read.csv('/cbica/projects/network_replication/adapted_Rscripts/subs_no_files.csv')
GBC.subxparcel.matrix.glasser <- matrix(data = NA, nrow = nrow(participants), ncol = 361)
regionheaders <- as.character(glasser.parcel.labels$label)
demoheaders <- c("rbcid")
colheaders <- as.matrix(c(demoheaders,regionheaders))
colnames(GBC.subxparcel.matrix.glasser) <- colheaders
#compute GBC for each subject for all 4 atlases
for(sub in c(1:nrow(participants))){
rbcid=as.character(participants[sub,4])
if(rbcid %in% subs_no_files){
next
}
else {
rbcid.data.glasser <- computeGBC(rbcid, "glasser")
GBC.subxparcel.matrix.glasser[sub,] <- cbind(rbcid, t(rbcid.data.glasser))
print(paste(rbcid, "glasser"))
}
}
subs_no_files
subs_no_files <- read.csv('/cbica/projects/network_replication/adapted_Rscripts/subs_no_files.csv')
subs_no_files
participants <- read.csv('/cbica/projects/network_replication/adapted_Rscripts/participants_allIDs.csv')
subs_no_files <- read.csv('/cbica/projects/network_replication/adapted_Rscripts/subs_no_files.csv')
GBC.subxparcel.matrix.glasser <- matrix(data = NA, nrow = nrow(participants), ncol = 361)
regionheaders <- as.character(glasser.parcel.labels$label)
demoheaders <- c("rbcid")
colheaders <- as.matrix(c(demoheaders,regionheaders))
colnames(GBC.subxparcel.matrix.glasser) <- colheaders
#compute GBC for each subject for all 4 atlases
for(sub in c(1:nrow(participants))){
rbcid=as.character(participants[sub,4])
if(rbcid %in% subs_no_files){
next
}
else {
rbcid.data.glasser <- computeGBC(rbcid, "glasser")
GBC.subxparcel.matrix.glasser[sub,] <- cbind(rbcid, t(rbcid.data.glasser))
print(paste(rbcid, "glasser"))
}
}
subs_no_files <- read.csv('/cbica/projects/network_replication/adapted_Rscripts/subs_no_files.csv')
subs_no_files
GBC.subxparcel.matrix.glasser <- matrix(data = NA, nrow = nrow(participants), ncol = 361)
regionheaders <- as.character(glasser.parcel.labels$label)
demoheaders <- c("rbcid")
colheaders <- as.matrix(c(demoheaders,regionheaders))
colnames(GBC.subxparcel.matrix.glasser) <- colheaders
participants
for(sub in c(1:nrow(participants))){
rbcid=as.character(participants[sub,4])
if(rbcid %in% subs_no_files){
next
}
else {
rbcid.data.glasser <- computeGBC(rbcid, "glasser")
GBC.subxparcel.matrix.glasser[sub,] <- cbind(rbcid, t(rbcid.data.glasser))
print(paste(rbcid, "glasser"))
}
}
subs_no_files
subs_no_files <- read.csv('/cbica/projects/network_replication/adapted_Rscripts/subs_no_files.csv', row.names=F)
subs_no_files <- read.csv('/cbica/projects/network_replication/adapted_Rscripts/subs_no_files.csv', row.names=NULL)
subs_no_files
subs_no_files <- subs_no_files[,2]
subs_no_files
rbcid=as.character(participants[sub,4])
#compute GBC for each subject for all 4 atlases
for(sub in c(1:nrow(participants))){
rbcid=as.character(participants[sub,4])
if(rbcid %in% subs_no_files){
next
}
else {
rbcid.data.glasser <- computeGBC(rbcid, "glasser")
GBC.subxparcel.matrix.glasser[sub,] <- cbind(rbcid, t(rbcid.data.glasser))
print(paste(rbcid, "glasser"))
}
}
