schaefer400x17 <- info_cifti('/cbica/projects/network_replication/atlases/dlabel/Schaefer2018_400Parcels_17Networks_order.dlabel.nii')
library(cifti)
library(ciftiTools)
ciftiTools.setOption('wb_path', '/Applications/workbench/')
library(gifti)
schaefer400x17 <- info_cifti('/cbica/projects/network_replication/atlases/dlabel/Schaefer2018_400Parcels_17Networks_order.dlabel.nii')
schaefer400x17$cifti
schaefer400x7 <- info_cifti('/cbica/projects/network_replication/atlases/dlabel/Schaefer2018_400Parcels_7Networks_order.dlabel.nii')
schaefer400x17$cifti
schaefer400x7$cifti
SNR.mask.schaefer400x17<- cifti::read_cifti("/cbica/projects/network_replication/atlases/parcellations/surface/SNRmask_schaefer400x17.pscalar.nii")
SNR.mask.schaefer400x17<- as.data.frame(SNR.mask.schaefer400x17$data)
colnames(SNR.mask.schaefer400x17) <- c("SNR.mask")
SNR.mask.schaefer400x17
SNR.mask.schaefer400x7<- cifti::read_cifti("/cbica/projects/network_replication/atlases/parcellations/surface/SNRmask_schaefer400x7.pscalar.nii")
SNR.mask.schaefer400x17<- cifti::read_cifti("/cbica/projects/network_replication/atlases/parcellations/surface/SNRmask_schaefer400x17.pscalar.nii")
SNR.mask.schaefer400x7<- as.data.frame(SNR.mask.schaefer400x7$data)
SNR.mask.schaefer400x17<- as.data.frame(SNR.mask.schaefer400x17$data)
SNR.mask.schaefer400x17
SNR.mask.schaefer400x7
identical(SNR.mask.schaefer400x17, SNR.mask.schaefer400x7)
setdiff(SNR.mask.schaefer400x17, SNR.mask.schaefer400x7)
SNR.mask.schaefer400x17
SNR.mask.schaefer400x7
knitr::opts_chunk$set(echo = TRUE)
library(ciftiTools)
ciftiTools.setOption('wb_path', '/Applications/workbench/')
library(gifti)
library(cifti)
Sys.setenv(RGL_USE_NULL=TRUE)
library(ggseg)
library(ggsegExtra)
library(ggsegGlasser)
library(ggsegSchaefer)
library(viridis)
require(ggplot2)
library(dplyr)
schaefer400.parcel.labels <- read.csv("/cbica/projects/network_replication/atlases/parcellations/schaefer400_7Network_ggseg_regionlist.csv", header = T)
#  make dataframe where rownames are the commAffil number, and then need to transpose V1 to be rows
schaefer400x7_rows <- as.data.frame(t(schaefer400.parcel.labels$network))
schaefer400x7_commAffil_mat <- as.data.frame(schaefer400x7_rows[rep(seq_len(nrow(schaefer400x7_rows)), each = 400), ])
rownames(schaefer400x7_commAffil_mat) <- NULL
SNRmask_schaefer400 <- read.csv('/cbica/projects/network_replication/atlases/Masks/SNRmask_schaefer400x7.csv')
# computeWNC(rbcid, "schaefer400", schaefer400x7_commAffil_mat, schaefer400.parcel.labels$network)
computeWNC <- function(rbcid, atlas, community_affiliation_mat, network_assignment){
#read in connectivity matrix
if(atlas == "schaefer400"){
connect.matrix <- read_cifti(sprintf("/cbica/projects/network_replication/pconn/%1$s/%1$s_ses-PNC1_task-rest_acq-singleband_space-fsLR_atlas-Schaefer417_den-91k_den-91k_bold.pconn.nii",rbcid))
mask <- SNRmask_schaefer400} #400 x 400 matrix
# set rows and columns corresponding to parcel # in mask to NA
connect.matrix$data[which(mask == 0), ] <- NA
connect.matrix$data[,which(mask == 0)] <- NA
#compute average within-network connectivity
WNC <- c()
for (i in 1:nrow(connect.matrix$data)) {
within_network_values <- c()
WNC_per_node <- c()
for (j in 1:length(connect.matrix$data[i,])) {  # entire  row
if(is.na(connect.matrix$data[i,j]) || connect.matrix$data[i,j] == 1) { # add NA if excluded by mask or identity
within_network_values <- append(within_network_values, NA);
} else if (schaefer400.parcel.labels$network[i] == schaefer400x7_commAffil_mat[i,j]) {
within_network_values <- append(within_network_values, connect.matrix$data[i,j])
} else if (schaefer400.parcel.labels$network[i] != schaefer400x7_commAffil_mat[i,j]) {
within_network_values <- append(within_network_values, NA)
}
}
#print(within_network_values)
WNC_per_node <- append(WNC_per_node, mean(within_network_values, na.rm=TRUE))
#print(WNC_per_node) # 1 value
WNC <- append(WNC, WNC_per_node)
}
return(WNC)
}
participants <- read.csv('/cbica/projects/network_replication/adapted_Rscripts/participants_allIDs.csv')
subs_no_files <- read.csv('/cbica/projects/network_replication/adapted_Rscripts/subs_no_files.csv', row.names=NULL)
subs_no_files <- subs_no_files[,2]
WNC.subxparcel.matrix.schaefer400 <- matrix(data = NA, nrow = nrow(participants), ncol = 401)
regionheaders <- as.character(schaefer400.parcel.labels$region)
demoheaders <- c("rbcid")
colheaders <- as.matrix(c(demoheaders,regionheaders))
colnames(WNC.subxparcel.matrix.schaefer400) <- colheaders
#compute WNC for each subject
for(sub in c(40))){
#compute WNC for each subject
for(sub in c(40)){
rbcid=as.character(participants[sub,4])
if(rbcid %in% subs_no_files){
next
}
else {
rbcid.data.schaefer400 <- computeWNC(rbcid, "schaefer400", schaefer400x7_commAffil_mat, schaefer400.parcel.labels$network)
WNC.subxparcel.matrix.schaefer400[sub,] <- cbind(rbcid, t(rbcid.data.schaefer400))
print(paste(sub, rbcid, "schaefer400"))
}
}
knitr::opts_chunk$set(echo = TRUE)
library(ciftiTools)
ciftiTools.setOption('wb_path', '/Applications/workbench/')
library(gifti)
library(cifti)
Sys.setenv(RGL_USE_NULL=TRUE)
library(ggseg)
library(ggsegExtra)
library(ggsegGlasser)
library(ggsegSchaefer)
library(viridis)
require(ggplot2)
library(dplyr)
gordon.parcel.labels <- read.csv("/cbica/projects/network_replication/atlases/parcellations/gordon_regionlist_xcp.csv", header = F)
gordon.communityAffil <- read.csv("/cbica/projects/network_replication/atlases/parcellations/Gordon333_Network/gordon333CommunityAffiliation.1D.csv", header=F)
gordon.parcel.labels <- as.data.frame(cbind(gordon.parcel.labels$V1, gordon.communityAffil$V1))
names(gordon.parcel.labels) <- c("label", "network")
#  make dataframe where rownames are the commAffil number, and then need to transpose V1 to be rows
gordon_rows <- as.data.frame(t(gordon.parcel.labels$network))
gordon_commAffil_mat <- as.data.frame(gordon_rows[rep(seq_len(nrow(gordon_rows)), each = 333), ])
rownames(gordon_commAffil_mat) <- NULL
SNRmask_gordon <- read.csv('/cbica/projects/network_replication/atlases/Masks/SNRmask_gordon.csv')
# computeWNC(rbcid, "gordon", gordon_commAffil_mat, gordon.parcel.labels$network)
computeWNC <- function(rbcid, atlas, community_affiliation_mat, network_assignment){
#read in connectivity matrix
if(atlas == "gordon"){
connect.matrix <- read_cifti(sprintf("/cbica/projects/network_replication/pconn/%1$s/%1$s_ses-PNC1_task-rest_acq-singleband_space-fsLR_atlas-Gordon_den-91k_den-91k_bold.pconn.nii",rbcid))
mask <- SNRmask_gordon} #333 x 333 matrix
# set rows and columns corresponding to parcel # in mask to NA
connect.matrix$data[which(mask == 0), ] <- NA
connect.matrix$data[,which(mask == 0)] <- NA
#compute average within-network connectivity
WNC <- c()
for (i in 1:nrow(connect.matrix$data)) {
within_network_values <- c()
WNC_per_node <- c()
for (j in 1:length(connect.matrix$data[i,])) {  # entire  row
if(is.na(connect.matrix$data[i,j]) || connect.matrix$data[i,j] == 1) { # add NA if excluded by mask or identity
within_network_values <- append(within_network_values, NA);
} else if (gordon.parcel.labels$network[i] == gordon_commAffil_mat[i,j]) {
within_network_values <- append(within_network_values, connect.matrix$data[i,j])
} else if (gordon.parcel.labels$network[i] != gordon_commAffil_mat[i,j]) {
within_network_values <- append(within_network_values, NA)
}
}
#print(within_network_values)
WNC_per_node <- append(WNC_per_node, mean(within_network_values, na.rm=TRUE))
#print(WNC_per_node) # 1 value
WNC <- append(WNC, WNC_per_node)
}
print(WNC)
}
participants <- read.csv('/cbica/projects/network_replication/adapted_Rscripts/participants_allIDs.csv')
subs_no_files <- read.csv('/cbica/projects/network_replication/adapted_Rscripts/subs_no_files.csv', row.names=NULL)
subs_no_files <- subs_no_files[,2]
WNC.subxparcel.matrix.gordon <- matrix(data = NA, nrow = nrow(participants), ncol = 334)
regionheaders <- as.character(gordon.parcel.labels$label)
demoheaders <- c("rbcid")
colheaders <- as.matrix(c(demoheaders,regionheaders))
colnames(WNC.subxparcel.matrix.gordon) <- colheaders
#compute WNC for each subject
for(sub in c(1:nrow(participants))){
rbcid=as.character(participants[sub,4])
if(rbcid %in% subs_no_files){
next
}
else {
rbcid.data.gordon <- computeWNC(rbcid, "gordon", gordon_commAffil_mat, gordon.parcel.labels$network)
WNC.subxparcel.matrix.gordon[sub,] <- cbind(rbcid, t(rbcid.data.gordon))
print(paste(sub, rbcid, "gordon"))
}
}
WNC.subxparcel.matrix.gordon
participants <- read.csv('/cbica/projects/network_replication/adapted_Rscripts/participants_allIDs.csv')
subs_no_files <- read.csv('/cbica/projects/network_replication/adapted_Rscripts/subs_no_files.csv', row.names=NULL)
subs_no_files <- subs_no_files[,2]
WNC.subxparcel.matrix.gordon <- matrix(data = NA, nrow = nrow(participants), ncol = 334)
regionheaders <- as.character(gordon.parcel.labels$label)
demoheaders <- c("rbcid")
colheaders <- as.matrix(c(demoheaders,regionheaders))
colnames(WNC.subxparcel.matrix.gordon) <- colheaders
WNC.subxparcel.matrix.gordon
colnames(WNC.subxparcel.matrix.gordon)
for(sub in c(1:nrow(participants))){
rbcid=as.character(participants[sub,4])
if(rbcid %in% subs_no_files){
next
}
else {
rbcid.data.gordon <- computeWNC(rbcid, "gordon", gordon_commAffil_mat, gordon.parcel.labels$network)
WNC.subxparcel.matrix.gordon[sub,] <- cbind(rbcid, t(rbcid.data.gordon))
print(paste(sub, rbcid, "gordon"))
}
}
SNRmask_gordon <- read.csv('/cbica/projects/network_replication/atlases/Masks/SNRmask_gordon.csv')
# computeWNC(rbcid, "gordon", gordon_commAffil_mat, gordon.parcel.labels$network)
computeWNC <- function(rbcid, atlas, community_affiliation_mat, network_assignment){
#read in connectivity matrix
if(atlas == "gordon"){
connect.matrix <- read_cifti(sprintf("/cbica/projects/network_replication/pconn/%1$s/%1$s_ses-PNC1_task-rest_acq-singleband_space-fsLR_atlas-Gordon_den-91k_den-91k_bold.pconn.nii",rbcid))
mask <- SNRmask_gordon} #333 x 333 matrix
# set rows and columns corresponding to parcel # in mask to NA
connect.matrix$data[which(mask == 0), ] <- NA
connect.matrix$data[,which(mask == 0)] <- NA
#compute average within-network connectivity
WNC <- c()
for (i in 1:nrow(connect.matrix$data)) {
within_network_values <- c()
WNC_per_node <- c()
for (j in 1:length(connect.matrix$data[i,])) {  # entire  row
if(is.na(connect.matrix$data[i,j]) || connect.matrix$data[i,j] == 1) { # add NA if excluded by mask or identity
within_network_values <- append(within_network_values, NA);
} else if (gordon.parcel.labels$network[i] == gordon_commAffil_mat[i,j]) {
within_network_values <- append(within_network_values, connect.matrix$data[i,j])
} else if (gordon.parcel.labels$network[i] != gordon_commAffil_mat[i,j]) {
within_network_values <- append(within_network_values, NA)
}
}
#print(within_network_values)
WNC_per_node <- append(WNC_per_node, mean(within_network_values, na.rm=TRUE))
#print(WNC_per_node) # 1 value
WNC <- append(WNC, WNC_per_node)
}
return(WNC)
}
participants <- read.csv('/cbica/projects/network_replication/adapted_Rscripts/participants_allIDs.csv')
subs_no_files <- read.csv('/cbica/projects/network_replication/adapted_Rscripts/subs_no_files.csv', row.names=NULL)
subs_no_files <- subs_no_files[,2]
WNC.subxparcel.matrix.gordon <- matrix(data = NA, nrow = nrow(participants), ncol = 334)
regionheaders <- as.character(gordon.parcel.labels$label)
demoheaders <- c("rbcid")
colheaders <- as.matrix(c(demoheaders,regionheaders))
colnames(WNC.subxparcel.matrix.gordon) <- colheaders
#compute WNC for each subject
for(sub in c(1:nrow(participants))){
rbcid=as.character(participants[sub,4])
if(rbcid %in% subs_no_files){
next
}
else {
rbcid.data.gordon <- computeWNC(rbcid, "gordon", gordon_commAffil_mat, gordon.parcel.labels$network)
WNC.subxparcel.matrix.gordon[sub,] <- cbind(rbcid, t(rbcid.data.gordon))
print(paste(sub, rbcid, "gordon"))
}
}
WNC.subxparcel.matrix.gordon
as.data.frame(WNC.subxparcel.matrix.gordon)
write.csv(WNC.subxparcel.matrix.gordon, "/cbica/projects/network_replication/WNC/WNC_subxparcel_matrix_gordon.csv", row.names=F, quote=F)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
require(ggplot2)
library(cowplot)
library(cifti)
library(ggseg)
Sys.setenv(RGL_USE_NULL=TRUE)
library(ggsegExtra)
library(ggsegGordon)
library(ggcorrplot)
library(viridis)
library(scales)
library(stringr)
library(tidyr)
# load SNR mask
SNRmask_gordon <- read.csv('/cbica/projects/network_replication/atlases/Masks/SNRmask_gordon.csv')
# load region list
gordon.parcel.labels <- read.csv("/cbica/projects/network_replication/atlases/parcellations/gordon_regionlist_xcp.csv", header = F)
names(gordon.parcel.labels) <- "label"
gordon.parcel.labels[which(SNRmask_gordon == 0),] <- NA # apply SNR mask to parcel names
gordon.parcel.labels <- na.omit(gordon.parcel.labels)
# load parcellated SA axis
gordon_SAaxis_cifti <- read_cifti("/cbica/projects/network_replication/SAaxis/SensorimotorAssociation_Axis_parcellated/SensorimotorAssociation.Axis.Gordon333.pscalar.nii")
gordon_SAaxis <- as.data.frame(cbind(rank(gordon_SAaxis_cifti$data), names(gordon_SAaxis_cifti$Parcel)))
colnames(gordon_SAaxis) <- c("SA.axis_rank","label")
# apply SNR mask
gordon_SAaxis[which(SNRmask_gordon == 0),] <- NA
gordon_SAaxis <- na.omit(gordon_SAaxis)
gordon_SAaxis$label <- gordon.parcel.labels$label
## GAM Results
gam.BNC.age.gordon <- read.csv("/Users/audluo/cbica/projects/network_replication/BNC/GAM/GAMresults.BNC.age.gordon.csv")
gam.BNC.age.gordon <- gam.BNC.age.gordon %>% select(-label)
gam.BNC.age.gordon$label <- gordon_SAaxis$label
gam.smooths.gordon <- read.csv("/Users/audluo/cbica/projects/network_replication/BNC/GAM/GAMsmoothfits.BNC.age.gordon.csv")
gam.smooths.gordon$orig_parcelname <- gam.smooths.gordon$label
gam.agepeaks.gordon <- read.csv("/Users/audluo/cbica/projects/network_replication/BNC/GAM/GAMpeaks.BNC.age.gordon.csv")
gam.agepeaks.gordon <- gam.agepeaks.gordon %>% select(-label)
gam.agepeaks.gordon$label <- gordon_SAaxis$label
# Combine into Final Dfs
df.list <- list(gordon_SAaxis,gam.BNC.age.gordon)
BNC.axis <- Reduce(function(x,y) merge(x,y, all=TRUE, sort=F), df.list)
BNC.axis$SA.axis_rank <- as.numeric(BNC.axis$SA.axis_rank)
a <- merge(gordon.parcel.labels, gordon_SAaxis, by="label", sort=F)
a$label <- gsub("17Networks_", "", a$label)
gam.smooths.gordon <- left_join(gam.smooths.gordon, a, by = "label")
#names(gam.smooths.gordon)[11] <- "SA.axis_rank"
gam.smooths.gordon$SA.axis_rank <-as.numeric(gam.smooths.gordon$SA.axis_rank)
gam.agepeaks.gordon <- left_join(gam.agepeaks.gordon, gordon_SAaxis, by="label")
gam.agepeaks.gordon$SA.axis_rank <-as.numeric(gam.agepeaks.gordon$SA.axis_rank)
source("/cbica/projects/network_replication/software/rotate.parcellation.R")
source("/cbica/projects/network_replication/software/perm.sphere.p.R")
library(fabisearch)
gordatlas
install.packages("brainGraph")
library(brainGraph)
gordon333
gordon333[,2:4]
gordatlas
gordatlas[2:4]
identical(gordatlas[2:4], gordon333[,2:4])
gordatlas[2:4]
cbind(gordatlas[2:4], gordon333[,2:4])
setdiff(gordatlas[2:4], gordon333[,2:4])
identical(gordatlas[2:4], gordon333[,2:4])
identical(gordatlas$x.mni, gordon333$x.mni)
identical(gordatlas$y.mni, gordon333$y.mni)
identical(gordatlas$z.mni, gordon333$z.mni)
gordon333[,2:4]
gordon333
gordatlas
gordon.parcel.labels
gordon.communityNames <- read.csv("/cbica/projects/network_replication/atlases/parcellations/Gordon333_Network/gordon333CommunityNames.csv")
gordon.communityNames
gordon.communityNames$communityAffil <- c(1:nrow(gordon.communityNames))
gordon.communityNames
gordon.parcel.labels
gordon.parcel.labels <- as.data.frame(cbind(gordon.parcel.labels$V1, gordon.communityAffil$V1))
gordon.parcel.labels
gordon.parcel.labels <- as.data.frame(cbind(gordon.parcel.labels$label, gordon.communityAffil$V1))
gordon.parcel.labels
gordon.communityNames
gordon.communityAffil
gordon.communityAffil <- read.csv("/cbica/projects/network_replication/atlases/parcellations/Gordon333_Network/gordon333CommunityAffiliation.1D.csv", header=F)
gordon.parcel.labels <- as.data.frame(cbind(gordon.parcel.labels$label, gordon.communityAffil$V1))
names(gordon.parcel.labels) <- c("label", "network")
gordon.parcel.labels
gordon.parcel.labels
gordon_SAaxis
gordon.parcel.labels
a
gordon.parcel.labels
gordon_SAaxis
gam.smooths.gordon
gordon.communityNames
gordon.parcel.labels
gordon.communityNames <- read.csv("/cbica/projects/network_replication/atlases/parcellations/Gordon333_Network/gordon333CommunityNames.csv")
gordon.communityNames$network <- c(1:nrow(gordon.communityNames))
gordon.communityNames
x <- left_join(gordon.parcel.labels, gordon.communityNames, by = "network")
gordon.communityNames
gordon.parcel.labels
gordon.communityNames$network <- as.character(gordon.communityNames$network)
x <- left_join(gordon.parcel.labels, gordon.communityNames, by = "network")
x
gordon.communityNames
gordon.communityNames <- read.csv("/cbica/projects/network_replication/atlases/parcellations/Gordon333_Network/gordon333CommunityNames.csv", header=F)
gordon.communityNames
gordon.parcel.labels <- read.csv("/cbica/projects/network_replication/atlases/parcellations/gordon_regionlist_xcp.csv", header = F)
gordon.communityAffil <- read.csv("/cbica/projects/network_replication/atlases/parcellations/Gordon333_Network/gordon333CommunityAffiliation.1D.csv", header=F)
gordon.communityNames <- read.csv("/cbica/projects/network_replication/atlases/parcellations/Gordon333_Network/gordon333CommunityNames.csv", header=F)
gordon.communityNames$network <- c(1:nrow(gordon.communityNames))
gordon.communityNames$network <- as.character(gordon.communityNames$network)
gordon.parcel.labels <- as.data.frame(cbind(gordon.parcel.labels$label, gordon.communityAffil$V1))
names(gordon.parcel.labels) <- c("label", "network")
gordon.parcel.labels
gordon.communityAffil
gordon.parcel.labels <- as.data.frame(cbind(gordon.parcel.labels$V1, gordon.communityAffil$V1))
names(gordon.parcel.labels) <- c("label", "network")
x <- left_join(gordon.parcel.labels, gordon.communityNames, by = "network")
gordon.parcel.labels <- read.csv("/cbica/projects/network_replication/atlases/parcellations/gordon_regionlist_xcp.csv", header = F)
gordon.communityAffil <- read.csv("/cbica/projects/network_replication/atlases/parcellations/Gordon333_Network/gordon333CommunityAffiliation.1D.csv", header=F)
gordon.communityNames <- read.csv("/cbica/projects/network_replication/atlases/parcellations/Gordon333_Network/gordon333CommunityNames.csv", header=F)
gordon.communityNames$network <- c(1:nrow(gordon.communityNames))
gordon.communityNames$network <- as.character(gordon.communityNames$network)
gordon.parcel.labels <- as.data.frame(cbind(gordon.parcel.labels$V1, gordon.communityAffil$V1))
names(gordon.parcel.labels) <- c("label", "network")
x <- left_join(gordon.parcel.labels, gordon.communityNames, by = "network")
x
gordon
plot(gordon) +
theme(legend.position = "bottom",
legend.text = element_text(size = 9)) +
guides(fill = guide_legend(ncol = 7))
library(ggsegGordon)
plot(gordon) +
theme(legend.position = "bottom",
legend.text = element_text(size = 9)) +
guides(fill = guide_legend(ncol = 6))
gordatlas
gordatlas
x
cbind(x$V1, gordatlas$Community)
gordatlas
cbind(x$V1, gordatlas$Community)
gordatlas$Community
x$V1
gordatlas$Community
cbind(x$V1, as.character(gordatlas$Community))
gordon.coords <- gordatlas[2:4]  #coordinates of gordon.coords parcel centroids on the freesurfer sphere
gordon.coords
gordon.parcel.labels
gordon.parcel.labels$label[162]
gordon.parcel.labels$label[161]
gordon.coords
gordon.coords[1:161,]
perm.id.full <- rotate.parcellation(coord.l = as.matrix(gordon.coords[1:161,]), coord.r = as.matrix(gordon.coords[162:333,]), nrot = 10000) #rotate the gordon.coords parcellation 10,000 times on the freesurfer sphere to generate spatial nulls for spin-based permutation significance testing
gordon.coords[162:333,]
perm.id.full <- rotate.parcellation(coord.l = as.matrix(gordon.coords[1:161,]), coord.r = as.matrix(gordon.coords[162:333,]), nrot = 10000) #rotate the gordon.coords parcellation 10,000 times on the freesurfer sphere to generate spatial nulls for spin-based permutation significance testing
grep("L", gordon.communityNames$V1)
gordon.communityNames
gordon.parcel.labels
grep("L", gordon.parcel.labels$label)
length(grep("L", gordon.parcel.labels$label))
length(grep("R", gordon.parcel.labels$label))
perm.id.full <- rotate.parcellation(coord.l = as.matrix(gordon.coords[1:161,]), coord.r = as.matrix(gordon.coords[162:333,]), nrot = 10000) #rotate the gordon.coords parcellation 10,000 times on the freesurfer sphere to generate spatial nulls for spin-based permutation significance testing
gordon.coords[1:161,]
gordon.coords[162:333,]
perm.id.full <- rotate.parcellation(coord.l = as.matrix(gordon.coords[1:161,]), coord.r = as.matrix(gordon.coords[162:333,]), nrot = 10000) #rotate the gordon.coords parcellation 10,000 times on the freesurfer sphere to generate spatial nulls for spin-based permutation significance testing
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
require(ggplot2)
library(cowplot)
library(cifti)
library(ggseg)
Sys.setenv(RGL_USE_NULL=TRUE)
library(ggsegExtra)
library(ggsegSchaefer)
library(ggcorrplot)
library(Hmisc)
library(viridis)
library(scales)
library(stringr)
library(tidyr)
schaefer200.coords <- read.csv("/cbica/projects/network_replication/software/rotate_parcellation/Schaefer2018_200Parcels_17Networks_order_FSLMNI152_1mm.Centroid_RAS.csv") #coordinates of schaefer200.coords parcel centroids on the freesurfer sphere
schaefer200.coords
perm.id.full <- rotate.parcellation(coord.l = as.matrix(schaefer200.coords[1:100,3:5]), coord.r = as.matrix(schaefer200.coords[101:200,3:5]), nrot = 10000) #rotate the schaefer200.coords parcellation 10,000 times on the freesurfer sphere to generate spatial nulls for spin-based permutation significance testing
source("/cbica/projects/network_replication/software/rotate.parcellation.R")
perm.id.full <- rotate.parcellation(coord.l = as.matrix(schaefer200.coords[1:100,3:5]), coord.r = as.matrix(schaefer200.coords[101:200,3:5]), nrot = 10000) #rotate the schaefer200.coords parcellation 10,000 times on the freesurfer sphere to generate spatial nulls for spin-based permutation significance testing
schaefer200.coords[1:100,3:5]
