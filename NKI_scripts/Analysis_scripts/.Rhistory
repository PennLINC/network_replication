theme(axis.text.x=element_text(size=32), axis.title.x=element_text(size=28), axis.title.y=element_text(size=28)) +
ggtitle("MeanFD vs relMeansRMSMotion in HCP-D") +
labs(x="MeanFD", y="RelMeansRMSMotion", shape = "", color = "") +
theme_classic() +
stat_cor(method = "spearman",size = 4, r.digits = 3)
fMRIinclude_CUBIDS_ScanTime
###
subject_scanTime_exclude <- fMRIinclude_CUBIDS_ScanTime$sub[c(which(fMRIinclude_CUBIDS_ScanTime$ScanTime_Total < 7))] # exclude participants with less than 7 min of scan time
subject_scanTime_exclude
fMRIinclude_CUBIDS_scanTime <- fMRIinclude_CUBIDS[-c(which(fMRIinclude_CUBIDS$sub %in% subject_scanTime_exclude)),]
PNC_FinalSample_CUBIDS <- fMRIinclude_CUBIDS_scanTime
length(unique(PNC_FinalSample_CUBIDS$sub)) # N=625 (excluded 4 participants)
nrow(PNC_FinalSample_CUBIDS) # 5159 scans
length(unique(fMRIinclude_CUBIDS$sub))
1262-1207
nrow(PNC_FinalSample_CUBIDS) # 5159 scans
saveRDS(PNC_FinalSample_CUBIDS, "/cbica/projects/network_replication/input/PNC/sample_selection/PNC_FinalSample_withCUBIDS_20230103.RData")
PNC_FinalSample_CUBIDS <- readRDS("/cbica/projects/network_replication/input/PNC/sample_selection/PNC_FinalSample_withCUBIDS_20230103.RData")
PNC_FinalSample_CUBIDS <- readRDS("/cbica/projects/network_replication/input/PNC/sample_selection/PNC_FinalSample_withCUBIDS_20230103.RData")
final_participants <- data.frame(unique(PNC_FinalSample_CUBIDS$sub))
names(final_participants) <- "sub"
demographics <- demographics %>% mutate(sub = gsub("HCD", "sub-", src_subject_id))
final_participants
demographics
demographics$sub <- paste0("sub-", demographics$rbcid)
final_participants
final_demographics <- merge(demographics, final_participants, by = "sub")
final_demographics
## include average of relMeansRMSMotion and meanFD across the acquisitions included in calculating connectivity matrix
# for each subject, take average relMeansRMSMotion and meanFD
subject <- c()
ses <- c()
avg_relMeansRMSMotion_vec <- c()
avg_meanFD_vec <- c()
for(i in c(1:length(unique(PNC_FinalSample_CUBIDS$sub)))){
indices <- which(PNC_FinalSample_CUBIDS$sub == unique(PNC_FinalSample_CUBIDS$sub)[i])
avg_RMS <- mean(as.numeric(PNC_FinalSample_CUBIDS$relMeansRMSMotion[indices]))
avg_meanFD <- mean(as.numeric(PNC_FinalSample_CUBIDS$meanFD[indices]))
subject <- append(subject, unique(PNC_FinalSample_CUBIDS$sub)[i])
ses <- append(ses,PNC_FinalSample_CUBIDS$ses[indices[1]])
avg_relMeansRMSMotion_vec <- append(avg_relMeansRMSMotion_vec, avg_RMS)
avg_meanFD_vec <- append(avg_meanFD_vec, avg_meanFD)
}
PNC_avgMotion <- data.frame(cbind(subject, ses, avg_meanFD_vec, avg_relMeansRMSMotion_vec))
names(PNC_avgMotion) <- c("sub", "ses", "meanFD_avgSes", "relMeansRMSMotion_avgSes")
PNC_avgMotion$meanFD_avgSes <- as.numeric(PNC_avgMotion$meanFD_avgSes)
PNC_avgMotion$relMeansRMSMotion_avgSes <- as.numeric(PNC_avgMotion$relMeansRMSMotion_avgSes)
final_dem_df <- merge(final_demographics, PNC_avgMotion, by="sub")
final_dem_df
write.csv(final_dem_df, "/cbica/projects/network_replication/input/PNC/sample_selection/PNC_demographics_finalsample_20230103.csv")
PNC_FinalSample_CUBIDS
CUBIDS_files_func
CUBIDS_files_func
CUBIDS_files_func <- CUBIDS_files_func %>% mutate(filenames = str_extract(FilePath, "sub-.*"))
CUBIDS_files_func$filenames
CUBIDS_files_func <- CUBIDS_files_func %>% mutate(filenames = str_extract(FilePath, "sub-[0-9]*_.*"))
CUBIDS_files_func$filenames
CUBIDS_files_func
merge(PNC_FinalSample_CUBIDS, CUBIDS_files_func[,c(30,31)], by="sub_task")
PNC_FinalSample_CUBIDS
merge(PNC_FinalSample_CUBIDS, CUBIDS_files_func[,c(30,31)], by="sub_task")
PNC_FinalSample_CUBIDS <- merge(PNC_FinalSample_CUBIDS, CUBIDS_files_func[,c(30,31)], by="sub_task")
PNC_FinalSample_CUBIDS
PNC_FinalSample_CUBIDS
i=1
PNC_FinalSample_CUBIDS$filenames[i]
library(dplyr)
library(tidyverse)
library(magrittr)
library(reshape)
library(reshape2)
library(MASS)
library(stargazer)
library(cifti)
library(ggplot2)
library(ggpubr)
test <- readRDS("/cbica/projects/network_replication/input/HCPD/sample_selection/HCPD_FinalSample_withCUBIDS_20221226.RData")
test
test <- readRDS("/cbica/projects/network_replication/input/HCPD/sample_selection/HCPD_FinalSample_withCUBIDS_20221227.RData")
test
PNC_FinalSample_CUBIDS$filenames[i]
PNC_FinalSample_CUBIDS$sub_task[i]
PNC_FinalSample_CUBIDS
i=3
PNC_FinalSample_CUBIDS$sub_task[i]
unique(collated_PNC.xcp_headMotion$Variant)
PNC_FinalSample_CUBIDS$Variant
PNC_FinalSample_CUBIDS[95,]
PNC_FinalSample_CUBIDS$Variant <- gsub("Non-Variant", "", PNC_FinalSample_CUBIDS$Variant)
PNC_FinalSample_CUBIDS$Variant
View(PNC_FinalSample_CUBIDS)
PNC_FinalSample_CUBIDS$Variant <- gsub("", NA, PNC_FinalSample_CUBIDS$Variant)
PNC_FinalSample_CUBIDS$Variant
PNC_FinalSample_CUBIDS <- readRDS("/cbica/projects/network_replication/input/PNC/sample_selection/PNC_demographics_finalsample_20230103.csv")
PNC_FinalSample_CUBIDS <- readRDS("/cbica/projects/network_replication/input/PNC/sample_selection/PNC_demographics_finalsample_20230103.csv")
PNC_FinalSample_CUBIDS <- read.csv("/cbica/projects/network_replication/input/PNC/sample_selection/PNC_demographics_finalsample_20230103.csv")
CUBIDS_files_func <- CUBIDS_files_func %>% mutate(filenames = str_extract(FilePath, "sub-[0-9]*_.*"))
PNC_FinalSample_CUBIDS <- merge(PNC_FinalSample_CUBIDS, CUBIDS_files_func[,c(30,31)], by="sub_task")
PNC_FinalSample_CUBIDS
CUBIDS_files_func
PNC_FinalSample_CUBIDS <- merge(PNC_FinalSample_CUBIDS, CUBIDS_files_func[,c(30,31)], by="sub_task")
PNC_FinalSample_CUBIDS
final_dem_df
# Calculate scan time for each subject
# load cubids summary and files csv
CUBIDS_summary <- read.csv("/cbica/projects/network_replication/input/PNC/CUBIDS_csvs/PNC_FINAL_summary.csv")
CUBIDS_summary <- CUBIDS_summary[,-c(1:4)]
CUBIDS_files <- read.csv("/cbica/projects/network_replication/input/PNC/CUBIDS_csvs/PNC_FINAL_files.csv")
CUBIDS_files_func <- CUBIDS_files[-c(which(str_detect(CUBIDS_files$FilePath, "dwi")), which(str_detect(CUBIDS_files$FilePath, "anat")), which(str_detect(CUBIDS_files$FilePath, "fmap"))),]
unique(CUBIDS_files_func$KeyGroup)
CUBIDS_files_func <- CUBIDS_files_func %>% mutate(sub=str_extract(FilePath, "sub-[0-9]*")) %>% mutate(task =
ifelse(str_detect(FilePath, "rest"), gsub("acq-", "", gsub("task-", "", str_extract(FilePath, "task-rest_acq-[a-z0-9]*"))), gsub("task-", "", str_extract(FilePath, "task-[a-z0-9]*"))))
CUBIDS_files_func$task[c(which(str_detect(CUBIDS_files_func$task, "rest")))]
CUBIDS_files_func <- CUBIDS_files_func %>% mutate(sub_task=paste0(sub, "_", task))
collated_PNC.xcp_headMotion <- collated_PNC.xcp_headMotion %>%  mutate(sub_task= ifelse(str_detect(Variant, "singleband") | str_detect(Variant, "100"), gsub("VARIANT[A-Za-z]*", "", paste0(sub, "_", task, "_", Variant)), paste0(sub, "_", task)))
fMRIinclude_CUBIDS <- merge(collated_PNC.xcp_headMotion, CUBIDS_files_func[,c(16, 21, 30)], by ="sub_task")
fMRIinclude_CUBIDS <- fMRIinclude_CUBIDS %>% arrange(sub) %>% mutate(ScanTimeMinutes = NumVolumes*RepetitionTime/60) # sort dataframe by subject
fMRIinclude_CUBIDS_ScanTime <- fMRIinclude_CUBIDS %>% group_by(sub) %>% summarise(ScanTime_Total = sum(ScanTimeMinutes))
range(fMRIinclude_CUBIDS_ScanTime$ScanTime_Total)
###
subject_scanTime_exclude <- fMRIinclude_CUBIDS_ScanTime$sub[c(which(fMRIinclude_CUBIDS_ScanTime$ScanTime_Total < 7))] # exclude participants with less than 7 min of scan time
fMRIinclude_CUBIDS_scanTime <- fMRIinclude_CUBIDS[-c(which(fMRIinclude_CUBIDS$sub %in% subject_scanTime_exclude)),]
PNC_FinalSample_CUBIDS <- fMRIinclude_CUBIDS_scanTime
length(unique(PNC_FinalSample_CUBIDS$sub)) # N=1207 (excluded 55 participants)
nrow(PNC_FinalSample_CUBIDS) # 3310 scans
# saveRDS(PNC_FinalSample_CUBIDS, "/cbica/projects/network_replication/input/PNC/sample_selection/PNC_FinalSample_withCUBIDS_20230103.RData")
PNC_FinalSample_CUBIDS
---
title: "PNC Sample Selection"
nrow(PNC_FinalSample_CUBIDS) # 3310 scans
PNC_FinalSample_CUBIDS
saveRDS(PNC_FinalSample_CUBIDS, "/cbica/projects/network_replication/input/PNC/sample_selection/PNC_FinalSample_withCUBIDS_20230103.RData")
PNC_FinalSample_CUBIDS <- readRDS("/cbica/projects/network_replication/input/PNC/sample_selection/PNC_FinalSample_withCUBIDS_20230103.RData")
demographics$sub <- paste0("sub-", demographics$rbcid)
final_participants <- data.frame(unique(PNC_FinalSample_CUBIDS$sub))
names(final_participants) <- "sub"
final_demographics <- merge(demographics, final_participants, by = "sub")
## include average of relMeansRMSMotion and meanFD across the acquisitions included in calculating connectivity matrix
# for each subject, take average relMeansRMSMotion and meanFD
subject <- c()
ses <- c()
avg_relMeansRMSMotion_vec <- c()
avg_meanFD_vec <- c()
for(i in c(1:length(unique(PNC_FinalSample_CUBIDS$sub)))){
indices <- which(PNC_FinalSample_CUBIDS$sub == unique(PNC_FinalSample_CUBIDS$sub)[i])
avg_RMS <- mean(as.numeric(PNC_FinalSample_CUBIDS$relMeansRMSMotion[indices]))
avg_meanFD <- mean(as.numeric(PNC_FinalSample_CUBIDS$meanFD[indices]))
subject <- append(subject, unique(PNC_FinalSample_CUBIDS$sub)[i])
ses <- append(ses,PNC_FinalSample_CUBIDS$ses[indices[1]])
avg_relMeansRMSMotion_vec <- append(avg_relMeansRMSMotion_vec, avg_RMS)
avg_meanFD_vec <- append(avg_meanFD_vec, avg_meanFD)
}
PNC_avgMotion <- data.frame(cbind(subject, ses, avg_meanFD_vec, avg_relMeansRMSMotion_vec))
names(PNC_avgMotion) <- c("sub", "ses", "meanFD_avgSes", "relMeansRMSMotion_avgSes")
PNC_avgMotion$meanFD_avgSes <- as.numeric(PNC_avgMotion$meanFD_avgSes)
PNC_avgMotion$relMeansRMSMotion_avgSes <- as.numeric(PNC_avgMotion$relMeansRMSMotion_avgSes)
final_dem_df <- merge(final_demographics, PNC_avgMotion, by="sub")
# write.csv(final_dem_df, "/cbica/projects/network_replication/input/PNC/sample_selection/PNC_demographics_finalsample_20230103.csv")
write.csv(final_dem_df, "/cbica/projects/network_replication/input/PNC/sample_selection/PNC_demographics_finalsample_20230103.csv")
PNC_FinalSample_CUBIDS <- readRDS("/cbica/projects/network_replication/input/PNC/sample_selection/PNC_FinalSample_withCUBIDS_20230103.RData")
CUBIDS_files_func <- CUBIDS_files_func %>% mutate(filenames = str_extract(FilePath, "sub-[0-9]*_.*"))
PNC_FinalSample_CUBIDS <- merge(PNC_FinalSample_CUBIDS, CUBIDS_files_func[,c(30,31)], by="sub_task")
PNC_FinalSample_CUBIDS <- merge(PNC_FinalSample_CUBIDS, CUBIDS_files_func[,c(30,31)], by="sub_task")
PNC_FinalSample_CUBIDS
PNC_FinalSample_CUBIDS <- readRDS("/cbica/projects/network_replication/input/PNC/sample_selection/PNC_FinalSample_withCUBIDS_20230103.RData")
PNC_FinalSample_CUBIDS <- merge(PNC_FinalSample_CUBIDS, CUBIDS_files_func[,c(30,31)], by="sub_task")
PNC_FinalSample_CUBIDS
PNC_FinalSample_CUBIDS$Variant <- gsub("Non-Variant", NA, PNC_FinalSample_CUBIDS$Variant)
PNC_FinalSample_CUBIDS$Variant
atlases <- c("Glasser", "Gordon", "Schaefer217", "Schaefer417")
subject_list <- list()
ptseries_filenames <- list()
task_list <- list()
atlas_list <- list()
variant_list <- list()
for (i in c(1:nrow(PNC_FinalSample_CUBIDS))) {
for (j in c(1:length(atlases))){
atlas <- atlases[j]
subject <- PNC_FinalSample_CUBIDS$sub[i]
task <- PNC_FinalSample_CUBIDS$task[i]
variant <- PNC_FinalSample_CUBIDS$Variant[i]
#file <- PNC_FinalSample_CUBIDS$filenames[i]
atlas_list <- append(atlas, atlas_list)
subject_list <- append(subject, subject_list)
task_list <- append(task, task_list)
variant_list <- append(variant, variant_list)
file <- paste0(subject, "ses-PNC1_task-", task, "_acq-", variant, "_space-fsLR_atlas-", atlas, "_den-91k_timeseries.ptseries.nii")
ptseries_filenames <- append(file, ptseries_filenames)
}
print(paste(subject, "done", i, "/", nrow(PNC_FinalSample_CUBIDS)))
}
ptseries_filenames
which(!file.exists(ptseries_filenames))
ptseries_filenames
which(file.exists(ptseries_filenames))
filenamesDF <- as.data.frame(do.call(rbind, ptseries_filenames))
subject_namesDF <- as.data.frame(do.call(rbind, subject_list))
task_namesDF <- as.data.frame(do.call(rbind, task_list))
atlas_namesDF <- as.data.frame(do.call(rbind, atlas_list))
file_paths <- as.data.frame(cbind(subject_namesDF, task_namesDF, atlas_namesDF, filenamesDF))
names(file_paths) <- c("subject", "task", "atlas", "filenames")
file_paths <- file_paths %>% mutate(path = paste0("/cbica/projects/network_replication/input/PNC/PNC_xcp/", subject, "/", filenames)) #%>% mutate(sub_task_direction_run = paste0(subject, "_", task, "_", direction, "_", run))
file_paths
3310*4
which(!file.exists(file_paths$path))
ile.exists(file_paths$path)
file_paths$path
atlases <- c("Glasser", "Gordon", "Schaefer217", "Schaefer417")
subject_list <- list()
ptseries_filenames <- list()
task_list <- list()
atlas_list <- list()
variant_list <- list()
for (i in c(1:nrow(PNC_FinalSample_CUBIDS))) {
for (j in c(1:length(atlases))){
atlas <- atlases[j]
subject <- PNC_FinalSample_CUBIDS$sub[i]
task <- PNC_FinalSample_CUBIDS$task[i]
variant <- PNC_FinalSample_CUBIDS$Variant[i]
#file <- PNC_FinalSample_CUBIDS$filenames[i]
atlas_list <- append(atlas, atlas_list)
subject_list <- append(subject, subject_list)
task_list <- append(task, task_list)
variant_list <- append(variant, variant_list)
file <- paste0(subject, "_ses-PNC1_task-", task, "_acq-", variant, "_space-fsLR_atlas-", atlas, "_den-91k_timeseries.ptseries.nii")
ptseries_filenames <- append(file, ptseries_filenames)
}
print(paste(subject, "done", i, "/", nrow(PNC_FinalSample_CUBIDS)))
}
filenamesDF <- as.data.frame(do.call(rbind, ptseries_filenames))
subject_namesDF <- as.data.frame(do.call(rbind, subject_list))
task_namesDF <- as.data.frame(do.call(rbind, task_list))
atlas_namesDF <- as.data.frame(do.call(rbind, atlas_list))
file_paths <- as.data.frame(cbind(subject_namesDF, task_namesDF, atlas_namesDF, filenamesDF))
names(file_paths) <- c("subject", "task", "atlas", "filenames")
file_paths <- file_paths %>% mutate(path = paste0("/cbica/projects/network_replication/input/PNC/PNC_xcp/", subject, "/", filenames))
which(!file.exists(file_paths$path))
file_paths$path
file_paths <- file_paths %>% mutate(path = paste0("/cbica/projects/network_replication/input/PNC/pnc_xcp/", subject, "/", filenames))
file_paths$path
which(!file.exists(file_paths$path))
file_paths$path
file.exists("/cbica/projects/network_replication/input/PNC/pnc_xcp/sub-993394555/sub-993394555_ses-PNC1_task-idemo_acq-VARIANTNoFmap_space-fsLR_atlas-Schaefer417_den-91k_timeseries.ptseries.nii")
atlases <- c("Glasser", "Gordon", "Schaefer217", "Schaefer417")
subject_list <- list()
ptseries_filenames <- list()
task_list <- list()
atlas_list <- list()
variant_list <- list()
for (i in c(1:nrow(PNC_FinalSample_CUBIDS))) {
for (j in c(1:length(atlases))){
atlas <- atlases[j]
subject <- PNC_FinalSample_CUBIDS$sub[i]
task <- PNC_FinalSample_CUBIDS$task[i]
variant <- PNC_FinalSample_CUBIDS$Variant[i]
#file <- PNC_FinalSample_CUBIDS$filenames[i]
atlas_list <- append(atlas, atlas_list)
subject_list <- append(subject, subject_list)
task_list <- append(task, task_list)
variant_list <- append(variant, variant_list)
file <- paste0(subject, "_ses-PNC1_task-", task, "_acq-", variant, "_space-fsLR_atlas-", atlas, "_den-91k_bold.ptseries.nii")
ptseries_filenames <- append(file, ptseries_filenames)
}
print(paste(subject, "done", i, "/", nrow(PNC_FinalSample_CUBIDS)))
}
filenamesDF <- as.data.frame(do.call(rbind, ptseries_filenames))
subject_namesDF <- as.data.frame(do.call(rbind, subject_list))
task_namesDF <- as.data.frame(do.call(rbind, task_list))
atlas_namesDF <- as.data.frame(do.call(rbind, atlas_list))
file_paths <- as.data.frame(cbind(subject_namesDF, task_namesDF, atlas_namesDF, filenamesDF))
names(file_paths) <- c("subject", "task", "atlas", "filenames")
file_paths <- file_paths %>% mutate(path = paste0("/cbica/projects/network_replication/input/PNC/pnc_xcp/", subject, "/", filenames))
which(!file.exists(file_paths$path))
file_paths$path
i=1
j=1
atlas <- atlases[j]
subject <- PNC_FinalSample_CUBIDS$sub[i]
task <- PNC_FinalSample_CUBIDS$task[i]
variant <- PNC_FinalSample_CUBIDS$Variant[i]
#file <- PNC_FinalSample_CUBIDS$filenames[i]
atlas_list <- append(atlas, atlas_list)
subject_list <- append(subject, subject_list)
task_list <- append(task, task_list)
variant_list <- append(variant, variant_list)
variant
if (is.na(variant)) {
file <- paste0(subject, "_ses-PNC1_task-", task, "_space-fsLR_atlas-", atlas, "_den-91k_bold.ptseries.nii")
ptseries_filenames <- append(file, ptseries_filenames)
} else {
file <- paste0(subject, "_ses-PNC1_task-", task, "_acq-", variant, "_space-fsLR_atlas-", atlas, "_den-91k_bold.ptseries.nii")
ptseries_filenames <- append(file, ptseries_filenames)
}
file
atlases <- c("Glasser", "Gordon", "Schaefer217", "Schaefer417")
subject_list <- list()
ptseries_filenames <- list()
task_list <- list()
atlas_list <- list()
variant_list <- list()
for (i in c(1:nrow(PNC_FinalSample_CUBIDS))) {
for (j in c(1:length(atlases))){
atlas <- atlases[j]
subject <- PNC_FinalSample_CUBIDS$sub[i]
task <- PNC_FinalSample_CUBIDS$task[i]
variant <- PNC_FinalSample_CUBIDS$Variant[i]
#file <- PNC_FinalSample_CUBIDS$filenames[i]
atlas_list <- append(atlas, atlas_list)
subject_list <- append(subject, subject_list)
task_list <- append(task, task_list)
variant_list <- append(variant, variant_list)
if (is.na(variant)) {
file <- paste0(subject, "_ses-PNC1_task-", task, "_space-fsLR_atlas-", atlas, "_den-91k_bold.ptseries.nii")
ptseries_filenames <- append(file, ptseries_filenames)
} else {
file <- paste0(subject, "_ses-PNC1_task-", task, "_acq-", variant, "_space-fsLR_atlas-", atlas, "_den-91k_bold.ptseries.nii")
ptseries_filenames <- append(file, ptseries_filenames)
}
}
print(paste(subject, "done", i, "/", nrow(PNC_FinalSample_CUBIDS)))
}
filenamesDF <- as.data.frame(do.call(rbind, ptseries_filenames))
subject_namesDF <- as.data.frame(do.call(rbind, subject_list))
task_namesDF <- as.data.frame(do.call(rbind, task_list))
atlas_namesDF <- as.data.frame(do.call(rbind, atlas_list))
file_paths <- as.data.frame(cbind(subject_namesDF, task_namesDF, atlas_namesDF, filenamesDF))
names(file_paths) <- c("subject", "task", "atlas", "filenames")
file_paths <- file_paths %>% mutate(path = paste0("/cbica/projects/network_replication/input/PNC/pnc_xcp/", subject, "/", filenames))
file_paths$path
ptm <- proc.time()
which(!file.exists(file_paths$path))
proc.time() - ptm
257.808 /60
file_paths
file_paths <- file_paths %>% mutate(path = paste0("/cbica/projects/network_replication/input/PNC/pnc_xcp/", subject, "/", filenames)) %>% mutate(sub_task=paste0(sub, "_", task)
file_paths
file_paths <- file_paths %>% mutate(path = paste0("/cbica/projects/network_replication/input/PNC/pnc_xcp/", subject, "/", filenames)) %>% mutate(sub_task=paste0(sub, "_", task))
file_paths
file_paths <- file_paths %>% mutate(path = paste0("/cbica/projects/network_replication/input/PNC/pnc_xcp/", subject, "/", filenames)) %>% mutate(sub_task=paste0(subject, "_", task))
file_paths_restOnly <- file_paths[which(file_paths$task == "rest"),]
PNC_FinalSample_CUBIDS
test <- readRDS("/cbica/projects/network_replication/input/HCPD/sample_selection/HCPD_FinalSample_withCUBIDS_20221227.RData")
test
PNC_FinalSample_CUBIDS[, c(1, ncol(PNC_FinalSample_CUBIDS))]
PNC_FinalSample_CUBIDS
file_paths
PNC_FinalSample_CUBIDS
PNC_FinalSample_CUBIDS[, c(1, which(names(PNC_FinalSample_CUBIDS) == "meanFD")), which(names(PNC_FinalSample_CUBIDS) == "ScanTimeMinutes"))]
PNC_FinalSample_CUBIDS[, c(1, which(names(PNC_FinalSample_CUBIDS) == "meanFD"), which(names(PNC_FinalSample_CUBIDS) == "ScanTimeMinutes"))]
file_paths_FINAL <- merge(file_paths, PNC_FinalSample_CUBIDS[, c(1, which(names(PNC_FinalSample_CUBIDS) == "meanFD"), which(names(PNC_FinalSample_CUBIDS) == "ScanTimeMinutes"))], by = "sub_task")
file_paths_FINAL
file_paths
PNC_FinalSample_CUBIDS
variant_namesDF <- as.data.frame(do.call(rbind, variant_list))
file_paths <- as.data.frame(cbind(subject_namesDF, task_namesDF, atlas_namesDF, filenamesDF))
names(file_paths) <- c("subject", "task", "atlas", "Variant", "filenames")
file_paths <- as.data.frame(cbind(subject_namesDF, task_namesDF, atlas_namesDF, variant_namesDF, filenamesDF))
names(file_paths) <- c("subject", "task", "atlas", "Variant", "filenames")
file_paths <- file_paths %>% mutate(path = paste0("/cbica/projects/network_replication/input/PNC/pnc_xcp/", subject, "/", filenames)) %>% mutate(sub_task= ifelse(str_detect(Variant, "singleband") | str_detect(Variant, "100"), gsub("VARIANT[A-Za-z]*", "", paste0(sub, "_", task, "_", Variant)), paste0(sub, "_", task)))
file_paths <- file_paths %>% mutate(path = paste0("/cbica/projects/network_replication/input/PNC/pnc_xcp/", subject, "/", filenames)) %>% mutate(sub_task= ifelse(str_detect(Variant, "singleband") | str_detect(Variant, "100"), gsub("VARIANT[A-Za-z]*", "", paste0(subject, "_", task, "_", Variant)), paste0(subject, "_", task)))
file_paths
file_paths_restOnly <- file_paths[which(file_paths$task == "rest"),]
file_paths_FINAL <- merge(file_paths, PNC_FinalSample_CUBIDS[, c(1, which(names(PNC_FinalSample_CUBIDS) == "meanFD"), which(names(PNC_FinalSample_CUBIDS) == "ScanTimeMinutes"))], by = "sub_task")
file_paths_FINAL
PNC_FinalSample_CUBIDS[, c(1, which(names(PNC_FinalSample_CUBIDS) == "meanFD"), which(names(PNC_FinalSample_CUBIDS) == "ScanTimeMinutes"))]
PNC_FinalSample_CUBIDS$sub_task
file_paths$sub_task
file_paths$Variant
PNC_FinalSample_CUBIDS$sub_task
file_paths$Variant
str_extract(file_paths$Variant[9], "singleband|100")
file_paths$Variant[9]
file_paths <- file_paths %>% mutate(path = paste0("/cbica/projects/network_replication/input/PNC/pnc_xcp/", subject, "/", filenames)) %>% mutate(sub_task= ifelse(str_detect(task, "rest"), str_extract(Variant, "singleband|100"), paste0(subject, "_", task)))
file_paths$Variant
file_paths$sub_task
file_paths <- file_paths %>% mutate(path = paste0("/cbica/projects/network_replication/input/PNC/pnc_xcp/", subject, "/", filenames)) %>% mutate(sub_task= ifelse(str_detect(task, "rest"), paste0(subject, "_", str_extract(Variant, "singleband|100"), paste0(subject, "_", task)))
file_paths$sub_task
file_paths <- file_paths %>% mutate(path = paste0("/cbica/projects/network_replication/input/PNC/pnc_xcp/", subject, "/", filenames)) %>% mutate(sub_task= ifelse(str_detect(task, "rest"), paste0(subject, "_", str_extract(Variant, "singleband|100")), paste0(subject, "_", task)))
file_paths$sub_task
cbind(PNC_FinalSample_CUBIDS$sub_task, file_paths$sub_task)
file_paths <- file_paths %>% mutate(path = paste0("/cbica/projects/network_replication/input/PNC/pnc_xcp/", subject, "/", filenames)) %>% mutate(sub_task= ifelse(str_detect(task, "rest"), paste0(subject, "_", task, "_", str_extract(Variant, "singleband|100")), paste0(subject, "_", task)))
cbind(PNC_FinalSample_CUBIDS$sub_task, file_paths$sub_task)
file_paths_restOnly <- file_paths[which(file_paths$task == "rest"),]
file_paths_FINAL <- merge(file_paths, PNC_FinalSample_CUBIDS[, c(1, which(names(PNC_FinalSample_CUBIDS) == "meanFD"), which(names(PNC_FinalSample_CUBIDS) == "ScanTimeMinutes"))], by = "sub_task")
file_paths_FINAL
file_paths
file_paths_FINAL
test
PNC_FinalSample_CUBIDS
file_paths_FINAL <- merge(file_paths, PNC_FinalSample_CUBIDS[, 1], by = "sub_task")
PNC_FinalSample_CUBIDS
file_paths_FINAL <- merge(file_paths, PNC_FinalSample_CUBIDS[, c(1, ncol(PNC_FinalSample_CUBIDS))], by = "sub_task")
file_paths_FINAL
PNC_FinalSample_CUBIDS[, c(1)]
file_paths_FINAL <- merge(file_paths, data.frame(PNC_FinalSample_CUBIDS[, c(1)]), by = "sub_task")
data.frame(PNC_FinalSample_CUBIDS[, c(1)])
file_paths_FINAL <- merge(file_paths, PNC_FinalSample_CUBIDS[, c(1, 2)], by = "sub_task")
file_paths_FINAL
file_paths_restOnly_FINAL <- merge(file_paths_restOnly, PNC_FinalSample_CUBIDS[, c(1, 2)], by = "sub_task")
file_paths_restOnly_FINAL
length(unique(file_paths_FINAL$sub_task)) # 5159 scans
length(unique(file_paths_FINAL$subject)) #N=625
length(unique(file_paths_restOnly_FINAL$sub_task_direction_run)) # 2324 scans
length(unique(file_paths_restOnly_FINAL$sub_task)) # 2324 scans
PNC_qc_filenames_atlases <- list(PNC_FinalSample_CUBIDS, file_paths_FINAL)
PNC_qc_filenames_atlases_restOnly <- list(PNC_FinalSample_CUBIDS[c(which(PNC_FinalSample_CUBIDS$task=="rest")),], file_paths_restOnly_FINAL)
PNC_qc_filenames_atlases
saveRDS(PNC_qc_filenames_atlases, "/cbica/projects/network_replication/input/PNC/sample_selection/PNC_FinalSample_withCUBIDS_20230103.RData")
saveRDS(PNC_qc_filenames_atlases_restOnly, "/cbica/projects/network_replication/input/PNC/sample_selection/PNC_FinalSample_withCUBIDS_restOnly_20230103.RData")
ggplot(collated_PNC.xcp, aes(x=as.numeric(meanFD), y=as.numeric(relMeansRMSMotion))) +
geom_point(alpha = 0.7, size = 2, color = '#88419D') +
theme(axis.text.x=element_text(size=32), axis.title.x=element_text(size=28), axis.title.y=element_text(size=28)) +
ggtitle("MeanFD vs relMeansRMSMotion in HCP-D") +
labs(x="MeanFD", y="RelMeansRMSMotion", shape = "", color = "") +
theme_classic() +
stat_cor(method = "spearman",size = 4, r.digits = 3)
ggplot(collated_PNC.xcp, aes(x=as.numeric(meanFD), y=as.numeric(relMeansRMSMotion))) +
geom_point(alpha = 0.7, size = 2, color = '#88419D') +
theme(axis.text.x=element_text(size=32), axis.title.x=element_text(size=28), axis.title.y=element_text(size=28)) +
ggtitle("MeanFD vs relMeansRMSMotion in HCP-D") +
labs(x="MeanFD", y="RelMeansRMSMotion", shape = "", color = "") +
theme_classic() +
stat_cor(method = "spearman",size = 4, r.digits = 3)
ggplot(collated_PNC.xcp, aes(x=as.numeric(meanFD), y=as.numeric(relMeansRMSMotion))) +
geom_point(alpha = 0.7, size = 2, color = '#88419D') +
theme(axis.text.x=element_text(size=32), axis.title.x=element_text(size=28), axis.title.y=element_text(size=28)) +
ggtitle("MeanFD vs relMeansRMSMotion in HCP-D") +
labs(x="MeanFD", y="RelMeansRMSMotion", shape = "", color = "") +
theme_classic() +
stat_cor(method = "spearman",size = 4, r.digits = 3)
ggplot(collated_PNC.xcp, aes(x=as.numeric(meanFD), y=as.numeric(relMeansRMSMotion))) +
geom_point(alpha = 0.7, size = 2, color = '#88419D') +
theme(axis.text.x=element_text(size=32), axis.title.x=element_text(size=28), axis.title.y=element_text(size=28)) +
ggtitle("MeanFD vs relMeansRMSMotion in PNC") +
labs(x="MeanFD", y="RelMeansRMSMotion", shape = "", color = "") +
theme_classic() +
stat_cor(method = "spearman",size = 4, r.digits = 3)
ggplot(collated_PNC.xcp, aes(x=as.numeric(meanFD), y=as.numeric(relMeansRMSMotion))) +
geom_point(alpha = 0.7, size = 2, color = '#88419D') +
theme(axis.text.x=element_text(size=32), axis.title.x=element_text(size=28), axis.title.y=element_text(size=28)) +
ggtitle("MeanFD vs relMeansRMSMotion in PNC") +
labs(x="MeanFD", y="RelMeansRMSMotion", shape = "", color = "") +
theme_classic() +
stat_cor(method = "spearman",size = 4, r.digits = 3)
ScanTime_fig_PNC
scans_per_task_fig <- ggplot(fMRIinclude_scans_ALL, aes(x=n, color=task, fill=task)) +
geom_bar(alpha=0.5, position="dodge", bins=5, width=0.5) +
theme_classic() +
ggtitle("Numbers of task or rest runs per participant") +
annotate(geom="text", x=2, y=650, label="Total scans for carit and guessing = 2 \n Total scans for emotion = 1 \n Total scans for rest = 4", color="black", fontface="bold") +
ylim(0, 750)
ScanTime_fig_PNC_restOnly <- ggplot(fMRIinclude_CUBIDS_ScanTime_restOnly, aes(x=ScanTime_Total)) +
geom_histogram(position="identity", alpha=0.5, bins=25, colour = "#24A6A8FF", fill = "#24A6A8FF") +
theme_classic(base_size=16) +
annotate(geom="text", x=7, y=800, label="Total N = 1051", color="black", fontface="bold", size=5, hjust=0) +
annotate(geom="text", x=7, y=750, label="Rest Only \nTR = 3000ms", color="black", fontface="bold", size=5, hjust=0) +
annotate(geom="text", x=7, y=700, label="Max Scan Time 11.2 min: N = 62", color="black", size=5, hjust=0) +
annotate(geom="text", x=7, y=650, label="7 min <= Scan Time < 11.2 min: N = 8", color="black", size=5, hjust=0) +
annotate(geom="text", x=7, y=600, label="6 min <= Scan Time < 7 min: N = 973", color="black", size=5, hjust=0) +
annotate(geom="text", x=7, y=550, label="Scan Time < 6 min: N = 8", color="black", size=5, hjust=0) +
annotate(geom="text", x=7, y=500, label="Minimum Scan Time 3.1 min: N = 1", color="black", size=5 , hjust=0) +
ggtitle("Histogram of Total Scan Time \nRest Only (in Minutes): \nPNC")
ScanTime_fig_PNC <- ggplot(fMRIinclude_CUBIDS_ScanTime, aes(x=ScanTime_Total)) +
geom_histogram(position="identity", alpha=0.5, bins=40, colour = "#24A6A8FF", fill = "#24A6A8FF") +
theme_classic(base_size=16) +
annotate(geom="text", x=7, y=800, label="Total N = 1262", color="black", fontface="bold", size=5, hjust=0) +
annotate(geom="text", x=7, y=750, label="Tasks: idemo, nback, rest \nTR = 3000ms", color="black", fontface="bold", size=5, hjust=0) +
annotate(geom="text", x=7, y=700, label="Max Scan Time 33.25 min: N = 58", color="black", size=5, hjust=0) +
annotate(geom="text", x=7, y=650, label="20 min <= Scan Time < 33.25 min: N = 971", color="black", size=5, hjust=0) +
annotate(geom="text", x=7, y=600, label="15 min <= Scan Time < 20 min: N = 91", color="black", size=5, hjust=0) +
annotate(geom="text", x=7, y=550, label="10 min <= Scan Time < 15 min: N = 84", color="black", size=5, hjust=0) +
annotate(geom="text", x=7, y=500, label="Scan Time < 10 min: N = 57", color="black", size=5, hjust=0) +
annotate(geom="text", x=7, y=450, label="Minimum Scan Time 3.6 min: N = 1", color="black", size=5 , hjust=0) +
ggtitle("Histogram of Total Scan Time (in Minutes): \n PNC")
ScanTime_fig_PNC
ScanTime_fig_PNC_restOnly
PNC_CIFTI_summary  <- readRDS("/cbica/projects/network_replication/input/PNC/sample_selection/PNC_FinalSample_withCUBIDS_20230103.RData")
participants <- unique(PNC_CIFTI_summary[[1]]$sub)
participants
length(participants)
# paths to all the cifti files (task carit, emotion, guessing, rest for each atlas)
PNC_CIFTI_filepaths <- PNC_CIFTI_summary[[2]]$path
PNC_CIFTI_filepaths
subject = "sub-1299596535"
list_filepath= PNC_CIFTIfiles$path
ciftiFiles_df = PNC_CIFTIfiles
index_filepath <- which(str_detect(list_filepath, subject))
PNC_CIFTI_summary  <- readRDS("/cbica/projects/network_replication/input/PNC/sample_selection/PNC_FinalSample_withCUBIDS_20221227.RData")
loadCiftiTimeseries <- function(name, cifti) {
timeseries <- cifti[[name]]$data
timeseries <- t(timeseries)
return(timeseries)
}
## This function concatenates the timeseries then creates connectivity matrix
### @param list_timeseries A list of timeseries from each available acquisition for a given subject to concatenate
makeConnMatrix <- function(list_timeseries){
rbound <- do.call(rbind, list_timeseries)
corr_matrix <- round(cor(rbound, use = "complete.obs"), 5)
return(corr_matrix)
}
list_filepath= PNC_CIFTI_filepaths
ciftiFiles_df = PNC_CIFTI_summary
subject
index_filepath <- which(str_detect(list_filepath, subject))
atlas <- gsub("atlas-", "", str_extract(list_filepath[index_filepath], "atlas-[a-zA-Z0-9]+"))
task <- gsub("task-", "", str_extract(list_filepath[index_filepath], "task-[a-z]+"))
direction <- gsub("dir-", "", str_extract(list_filepath[index_filepath], "dir-[A-Z]{2}"))
cifti_list <- lapply(list_filepath[index_filepath], read_cifti) # creates list of cifti files in atlas order for each participant
cifti_names <- as.data.frame(cbind(subject, atlas, task, direction))
cifti_names <- cifti_names %>% mutate(ciftiList_names = paste0(subject, "_", task, "_", direction, "_", atlas))
names(cifti_list) <- cifti_names$ciftiList_names
print(paste(which(participants == subject), "/", length(participants), "Cifti list done for", subject))
