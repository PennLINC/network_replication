knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(dplyr)
require(ggplot2)
library(cowplot)
library(cifti)
library(ggseg)
Sys.setenv(RGL_USE_NULL=TRUE)
library(ggsegExtra)
library(ggsegSchaefer)
library(ggsegGlasser)
library(ggsegGordon)
library(ggcorrplot)
library(viridis)
library(scales)
library(stringr)
library(tidyr)
library(ggpubr)
library(purrr)
library(pammtools)
#load('NKI_devEffectFigures_environment.RData')
source("/cbica/projects/network_replication/adapted_Rscripts/DevEffect_Figures.R")
source("/cbica/projects/network_replication/adapted_Rscripts/netrep_spinTests.R")
source("/cbica/projects/network_replication/software/perm.sphere.p.R")
atlases_GBC <- c("glasser", "gordon", "schaefer200", "schaefer400")
atlases <- c("gordon", "schaefer200x7", "schaefer200x17", "schaefer400x7", "schaefer400x17")
dataset <- "NKI"
glasser_SAaxis <- read.csv("/cbica/projects/network_replication/SAaxis/glasser_SAaxis.csv")
gordon_SAaxis <- read.csv("/cbica/projects/network_replication/SAaxis/gordon_SAaxis.csv")
schaefer200x7_SAaxis <- read.csv("/cbica/projects/network_replication/SAaxis/schaefer200x7_SAaxis.csv")
schaefer200x7_SAaxis$label <- gsub("7Network", "Network", schaefer200x7_SAaxis$label)
schaefer200x17_SAaxis <- read.csv("/cbica/projects/network_replication/SAaxis/schaefer200x17_SAaxis.csv")
schaefer200x17_SAaxis$label <- gsub("17Network", "Network", schaefer200x17_SAaxis$label)
schaefer200_SAaxis <- schaefer200x17_SAaxis
schaefer400x7_SAaxis  <- read.csv("/cbica/projects/network_replication/SAaxis/schaefer400x7_SAaxis.csv")
schaefer400x7_SAaxis$label <-  gsub("7Networks", "Networks", schaefer400x7_SAaxis$label)
schaefer400x17_SAaxis <- read.csv("/cbica/projects/network_replication/SAaxis/schaefer400x17_SAaxis.csv")
schaefer400x17_SAaxis$label <- gsub("17Network", "Network", schaefer400x17_SAaxis$label)
schaefer400_SAaxis <- schaefer400x17_SAaxis
metric = "BNC"
for(i in c(1:length(atlases))){
df_name <- paste0("gam.", metric, ".", "age.", atlases[i])
assign(df_name, read.csv(sprintf("/cbica/projects/network_replication/output/%1$s/%2$s/GAM/GAMresults.%2$s.age.%3$s.csv", dataset, metric, atlases[i])))
assign(df_name, get(df_name) %>% select(-label))
SAaxis <- get(paste0(atlases[i], "_", "SAaxis"))
df_to.label <- get(df_name)
df_to.label$label <- SAaxis$label
assign(df_name, df_to.label)
}
names(gam.BNC.age.schaefer400x7)
gam.BNC.age.schaefer400x7$label
schaefer400x7_xcp <- read.csv("/cbica/projects/network_replication/atlases/parcellations/schaefer400_7Network_regionlist.csv", header=F)
schaefer400x7_xcp <- paste0("7Networks_", schaefer400x7_xcp$V1)
schaefer400x7_xcp <- gsub("FrOper", "FrOperIns", schaefer400x7_xcp)
#schaefer400x7_xcp[grep("LH_Default_Temp", schaefer400x7_xcp)] <- gsub("Temp", "Par", schaefer400x7_xcp[grep("LH_Default_Temp", schaefer400x7_xcp)])
#schaefer400x7_xcp[grep("LH_Default_Temp", schaefer400x7_xcp)] <- gsub("_1", "_", schaefer400x7_xcp[grep("LH_Default_Temp", schaefer400x7_xcp)])
schaefer400x7_xcp[grep("LH_Default_PCC", schaefer400x7_xcp)] <- gsub("PCC", "pCunPCC", schaefer400x7_xcp[grep("LH_Default_PCC", schaefer400x7_xcp)])
schaefer400x7_xcp[grep("RH_Default_PFCm", schaefer400x7_xcp)] <- gsub("PFCm", "PFCdPFCm", schaefer400x7_xcp[grep("RH_Default_PFCm", schaefer400x7_xcp)])
schaefer400x7_xcp[grep("RH_Default_PCC", schaefer400x7_xcp)] <- gsub("PCC", "pCunPCC", schaefer400x7_xcp[grep("RH_Default_PCC", schaefer400x7_xcp)])
schaefer400x7_ggseg <- ggsegSchaefer::schaefer7_400$data$region[-c(which(is.na(ggsegSchaefer::schaefer7_400$data$region)))]
schaefer400x7_xcp[match(schaefer400x7_ggseg, schaefer400x7_xcp)][c(which(duplicated(schaefer400x7_xcp[match(schaefer400x7_ggseg, schaefer400x7_xcp)])))]
cbind(schaefer400x7_ggseg, schaefer400x7_xcp[match(schaefer400x7_ggseg, schaefer400x7_xcp)])
which(schaefer400x7_ggseg == "7Networks_LH_DorsAttn_Post_13")
# xcp is missing LH Default_Temp_1 through 10 (present in ggseg schaefer400x7 atlas)
# also ggseg schaefer400x7 atlas has some duplicates (they tend to have both a medial and lateral entry)
schaefer400x7_ggseg_noDups <- schaefer400x7_ggseg[-c(which(duplicated(schaefer400x7_ggseg)))]
cbind(schaefer400x7_ggseg_noDups, schaefer400x7_xcp[match(schaefer400x7_ggseg_noDups, schaefer400x7_xcp)])
cbind(setdiff(schaefer400x7_ggseg_noDups, schaefer400x7_xcp), setdiff(schaefer400x7_xcp, schaefer400x7_ggseg_noDups))
schaefer400x7_xcp[c(which(str_detect(schaefer400x7_xcp, "Default")))]
ggsegSchaefer::schaefer7_400$data[c(which(ggsegSchaefer::schaefer7_400$data$side == "medial")),]
# it looks like Par_8 through 17 from the fMRI data were renamed to Temp1-10. I need to map the roi to each other to make sure that these new parcel names actually correspond to the correct old parcel name
# it looks like i had to map the schaefer400x17 parcel names from the cifti files to schaefer400x7. so i should actually just use these parcel names since they match perfectly to ggseg AND have coordinate information.
schaefer400x7_coords_names <- schaefer400x7_coords$ROI.Name
# reorder spherical coordinates
schaefer400x7_coords <- read.csv("/cbica/projects/network_replication/software/rotate_parcellation/Schaefer2018_400Parcels_7Networks_order_FSLMNI152_1mm.Centroid_RAS.csv", header=TRUE)
schaefer400x7_coords_names <- schaefer400x7_coords$ROI.Name
setdiff(schaefer400x7_ggseg_noDups, schaefer400x7_coords_names)
# use example raw timeseries data to get schaefer names again
NKI_filepaths  <- readRDS("/cbica/projects/network_replication/input/NKI/sample_selection/NKI_FinalSample_withCUBIDS_20221219.RData")
A00018030_cifti <- read_cifti("/cbica/projects/network_replication/input/NKI/nki_xcp/sub-A00018030/sub-A00018030_ses-BAS1_task-rest_acq-645_space-fsLR_atlas-Schaefer417_den-91k_bold.ptseries.nii")
# the schaefer400x17 xcp parcel names are correct/updated, and match with the ggseg names
schaefer400x17_xcp <- names(A00018030_cifti$Parcel)
schaefer400x17_ggseg_noDups <- paste0(ggsegSchaefer::schaefer17_400$data$hemi, "_", ggsegSchaefer::schaefer17_400$data$region)
schaefer400x17_ggseg_noDups <- gsub("left", "17Networks_LH", schaefer400x17_ggseg_noDups)
schaefer400x17_ggseg_noDups <- gsub("right", "17Networks_RH", schaefer400x17_ggseg_noDups)
schaefer400x17_ggseg_noDups <- schaefer400x17_ggseg_noDups[-c(which(str_detect(schaefer400x17_ggseg_noDups, "NA")))]
schaefer400x17_ggseg_noDups <- schaefer400x17_ggseg_noDups[-c(which(duplicated(schaefer400x17_ggseg_noDups)))]
setdiff(schaefer400x17_xcp, schaefer400x17_ggseg_noDups)
setdiff(schaefer400x17_ggseg_noDups, schaefer400x17_xcp) # all the 400x17 names
test1 <- read.csv('/cbica/projects/network_replication/atlases/parcellations/schaefer400_7Network_regionlist.csv', header=F)
test2 <- read.csv('/cbica/projects/network_replication/atlases/parcellations/schaefer400_7Network_regionlist_reordered.csv')
test1$V1[c(which(str_detect(test1$V1, "Default")))]
schaefer400x7_manual_ggseg <- read.csv('/cbica/projects/network_replication/atlases/parcellations/schaefer400_7Network_ggseg_regionlist.csv')
schaefer400x7_manual_ggseg$region[c(which(str_detect(schaefer400x7_manual_ggseg$region, "Default")))]
setdiff(schaefer400x7_ggseg_noDups, schaefer400x7_manual_ggseg$region)
setdiff(schaefer400x7_ggseg_noDups, schaefer400x7_coords$ROI.Name)
setdiff(schaefer400x7_coords$ROI.Name, schaefer400x7_ggseg_noDups)
gam.BNC.age.schaefer400x7$label
schaefer400x7_coords$ROI.Name
setdiff(gam.BNC.age.schaefer400x7$label, gsub("7Networks", "Networks", schaefer400x7_coords$ROI.Name))
setdiff(gsub("7Networks", "Networks", schaefer400x7_coords$ROI.Name), gam.BNC.age.schaefer400x7$label)
which(gam.BNC.age.schaefer400x7$label == "Networks_LH_Cont_OFC_1")
gam.BNC.age.schaefer400x7$label
which(schaefer400x7_coords$ROI.Name == "7Networks_LH_Cont_OFC_1")
library(plyr)
library(dplyr)
require(ggplot2)
library(cowplot)
library(cifti)
library(ggseg)
Sys.setenv(RGL_USE_NULL=TRUE)
library(ggsegExtra)
library(ggsegSchaefer)
library(ggsegGlasser)
library(ggsegGordon)
library(ggcorrplot)
library(viridis)
library(scales)
library(stringr)
library(tidyr)
library(ggpubr)
library(purrr)
library(pammtools)
library(Hmisc)
source("/cbica/projects/network_replication/adapted_Rscripts/DevEffect_Figures.R")
source("/cbica/projects/network_replication/adapted_Rscripts/netrep_spinTests.R")
source("/cbica/projects/network_replication/adapted_Rscripts/GAM_functions.R")
source("/cbica/projects/network_replication/software/perm.sphere.p.R")
dataset <- "PNC"
metric <- "GBC"
source("/cbica/projects/network_replication/adapted_Rscripts/fitGAMs.R")
knitr::opts_chunk$set(echo = FALSE, include=FALSE)
cognition <- read.csv("/Users/audluo/cbica/projects/network_replication/input/PNC/sample_selection/n9498_cnb_factor_scores_fr_20170202.csv")
names(cognition)
scanid_rbcid_conversion <- read.csv("/Users/audluo/cbica/projects/network_replication/input/PNC/sample_selection/bblid_scanid_sub.csv")
cognition <- merge(cognition, scanid_rbcid_conversion, by = "bblid")
cognition <- select(cognition, c("envSES", "envHouseholds", "neighborhoodCrime", "rbcid")) %>% relocate(rbcid) %>% dplyr::rename(subject=rbcid)
#
names(cognition)
cognition <- select(cognition, c("F1_Exec_Comp_Cog_Accuracy", "rbcid")) %>% relocate(rbcid) %>% dplyr::rename(subject=rbcid)
cognition <- dplyr::select(cognition, c("F1_Exec_Comp_Cog_Accuracy", "rbcid")) %>% relocate(rbcid) %>% dplyr::rename(subject=rbcid)
dplyr::select(cognition, c("F1_Exec_Comp_Cog_Accuracy", "rbcid"))
#
names(cognition)
cognition <- dplyr::select(cognition, c("NAR_F1_Exec_Comp_Cog_Accuracy", "rbcid")) %>% relocate(rbcid) %>% dplyr::rename(subject=rbcid)
GBC.schaefer200.PNC <- read.csv("/cbica/projects/network_replication/output/PNC/GBC/GBCschaefer200_demographics_finalsample.csv")
names(GBC.schaefer200.PNC) <- gsub('X17Networks', "Networks", names(GBC.schaefer200.PNC))
GBC.schaefer200.PNC$sex <- as.factor(GBC.schaefer200.PNC$sex)
GBC.schaefer200.PNC <- merge(GBC.schaefer200.PNC, cognition, by="subject")
names(GBC.schaefer200.PNC)
gam.ef.schaefer200 <- matrix(data=NA, nrow=200, ncol=5) #matrix to save gam.fit.covariate output to
for(row in c(1:nrow(schaefer200x17.parcel.labels))){ #for each schaefer region
region <- schaefer200.parcel.labels$label[row]
GAM.RESULTS <- gam.fit.covariate(measure = "GBC", atlas = "schaefer200", dataset = dataset, region = region, smooth_var = "age", covariate.interest = "NAR_F1_Exec_Comp_Cog_Accuracy", covariates.noninterest = "sex + meanFD_avgSes", knots = 3, set_fx = TRUE) #run the gam.fit.covariate function
gam.ef.schaefer200[row,] <- GAM.RESULTS} #and append results to output df
schaefer200x17.parcel.labels
schaefer200x17_SAaxis <- read.csv("/cbica/projects/network_replication/SAaxis/schaefer200x17_SAaxis.csv")
schaefer200x17_SAaxis$label <- gsub("17Network", "Network", schaefer200x17_SAaxis$label)
schaefer200_SAaxis <- schaefer200x17_SAaxis
# Fit GAM model for cognition effect
gam.ef.schaefer200 <- matrix(data=NA, nrow=200, ncol=5) #matrix to save gam.fit.covariate output to
for(row in c(1:nrow(schaefer200x17.parcel.labels))){ #for each schaefer region
region <- schaefer200.parcel.labels$label[row]
GAM.RESULTS <- gam.fit.covariate(measure = "GBC", atlas = "schaefer200", dataset = dataset, region = region, smooth_var = "age", covariate.interest = "NAR_F1_Exec_Comp_Cog_Accuracy", covariates.noninterest = "sex + meanFD_avgSes", knots = 3, set_fx = TRUE) #run the gam.fit.covariate function
gam.ef.schaefer200[row,] <- GAM.RESULTS} #and append results to output df
GBC.schaefer200.PNC
GBC.schaefer200.PNC <- read.csv("/cbica/projects/network_replication/output/PNC/GBC/GBCschaefer200_demographics_finalsample.csv")
GBC.schaefer200.PNC
names(GBC.schaefer200.PNC) <- gsub('X17Networks', "Networks", names(GBC.schaefer200.PNC))
GBC.schaefer200.PNC$sex <- as.factor(GBC.schaefer200.PNC$sex)
merge(GBC.schaefer200.PNC, cognition, by="subject")
cognition
cognition$subject <- paste0("sub-", cognition$subject)
cognition
merge(GBC.schaefer200.PNC, cognition, by="subject")
GBC.schaefer200.PNC <- merge(GBC.schaefer200.PNC, cognition, by="subject")
library(plyr)
library(dplyr)
require(ggplot2)
library(cowplot)
library(cifti)
library(ggseg)
Sys.setenv(RGL_USE_NULL=TRUE)
library(ggsegExtra)
library(ggsegSchaefer)
library(ggsegGlasser)
library(ggsegGordon)
library(ggcorrplot)
library(viridis)
library(scales)
library(stringr)
library(tidyr)
library(ggpubr)
library(purrr)
library(pammtools)
library(Hmisc)
source("/cbica/projects/network_replication/adapted_Rscripts/DevEffect_Figures.R")
source("/cbica/projects/network_replication/adapted_Rscripts/netrep_spinTests.R")
source("/cbica/projects/network_replication/adapted_Rscripts/GAM_functions.R")
source("/cbica/projects/network_replication/software/perm.sphere.p.R")
dataset <- "PNC"
metric <- "GBC"
source("/cbica/projects/network_replication/adapted_Rscripts/fitGAMs.R")
schaefer200x17_SAaxis <- read.csv("/cbica/projects/network_replication/SAaxis/schaefer200x17_SAaxis.csv")
schaefer200x17_SAaxis$label <- gsub("17Network", "Network", schaefer200x17_SAaxis$label)
schaefer200_SAaxis <- schaefer200x17_SAaxis
schaefer200x17.parcel.labels <- read.csv("/cbica/projects/network_replication/atlases/parcellations/schaefer200x17_regionlist_final.csv")
schaefer200.parcel.labels <- schaefer200x17.parcel.labels #gbc
knitr::opts_chunk$set(echo = FALSE, include=FALSE)
GBC.schaefer200.PNC <- merge(GBC.schaefer200.PNC, cognition, by="subject")
# Fit GAM model for cognition effect
gam.ef.schaefer200 <- matrix(data=NA, nrow=200, ncol=5) #matrix to save gam.fit.covariate output to
for(row in c(1:nrow(schaefer200x17.parcel.labels))){ #for each schaefer region
region <- schaefer200.parcel.labels$label[row]
GAM.RESULTS <- gam.fit.covariate(measure = "GBC", atlas = "schaefer200", dataset = dataset, region = region, smooth_var = "age", covariate.interest = "NAR_F1_Exec_Comp_Cog_Accuracy", covariates.noninterest = "sex + meanFD_avgSes", knots = 3, set_fx = TRUE) #run the gam.fit.covariate function
gam.ef.schaefer200[row,] <- GAM.RESULTS} #and append results to output df
names(GBC.schaefer200.PNC)
GBC.schaefer200.PNC <- read.csv("/cbica/projects/network_replication/output/PNC/GBC/GBCschaefer200_demographics_finalsample.csv")
names(GBC.schaefer200.PNC) <- gsub('X17Networks', "Networks", names(GBC.schaefer200.PNC))
GBC.schaefer200.PNC$sex <- as.factor(GBC.schaefer200.PNC$sex)
GBC.schaefer200.PNC <- merge(GBC.schaefer200.PNC, cognition, by="subject")
names(GBC.schaefer200.PNC)
# Fit GAM model for cognition effect
gam.ef.schaefer200 <- matrix(data=NA, nrow=200, ncol=5) #matrix to save gam.fit.covariate output to
for(row in c(1:nrow(schaefer200x17.parcel.labels))){ #for each schaefer region
region <- schaefer200.parcel.labels$label[row]
GAM.RESULTS <- gam.fit.covariate(measure = "GBC", atlas = "schaefer200", dataset = dataset, region = region, smooth_var = "age", covariate.interest = "NAR_F1_Exec_Comp_Cog_Accuracy", covariates.noninterest = "sex + meanFD_avgSes", knots = 3, set_fx = TRUE) #run the gam.fit.covariate function
gam.ef.schaefer200[row,] <- GAM.RESULTS} #and append results to output df
GBC.schaefer200.PNC
region <- schaefer200.parcel.labels$label[row]
GAM.RESULTS <- gam.fit.covariate(measure = "GBC", atlas = "schaefer200", dataset = dataset, region = region, smooth_var = "age", covariate.interest = "NAR_F1_Exec_Comp_Cog_Accuracy", covariates.noninterest = "sex + meanFD_avgSes", knots = 3, set_fx = TRUE) #run the gam.fit.covariate function
#### FIT GAM SMOOTH WITH A COVARIATE OF INTEREST ####
##Function to fit a GAM (measure ~ s(smooth_var, k = knots, fx = set_fx) + covariate of interest + control covariates)) and save out statistics for the first covariate
gam.fit.covariate <- function(gam.data, measure, atlas, dataset, region, smooth_var, covariate.interest, covariates.noninterest, knots, set_fx = FALSE){
#Fit the gam
dataname <- sprintf("%s.%s.%s", measure, atlas, dataset)
gam.data <- get(dataname)
parcel <- region
region <- str_replace(region, "-", ".")
modelformula <- as.formula(sprintf("%s ~ s(%s, k = %s, fx = %s) + %s + %s", region, smooth_var, knots, set_fx, covariate.interest, covariates.noninterest))
gam.model <- gam(modelformula, method = "REML", data=gam.data)
gam.results <- summary(gam.model)
#GAM statistics
#t-value for the covariate of interest term and GAM-based significance of this term
gam.cov.tvalue <- gam.results$p.table[2,3]
#GAM based significance of the term
gam.cov.pvalue <- gam.results$p.table[2,4]
#Calculate the magnitude and significance of the covariate of interest effect by comparing full and reduced models
##Compare a full model GAM (with the covariate of interst) to a nested, reduced model (without covariate of interst)
nullmodel <- as.formula(sprintf("%s ~ s(%s, k = %s, fx = %s) + %s", region, smooth_var, knots, set_fx, covariates.noninterest))
gam.nullmodel <- gam(nullmodel, method = "REML", data=gam.data)
gam.nullmodel.results <- summary(gam.nullmodel)
##Full versus reduced model anova p-value
anova.cov.pvalue <- anova.gam(gam.nullmodel,gam.model,test='Chisq')$`Pr(>Chi)`[2]
if(is.na(anova.cov.pvalue)){ #if residual deviance is exactly equal between full and reduced models and p=value = NA, set p = 1
anova.cov.pvalue <- 1}
##Full versus reduced model direction-dependent partial R squared
### effect size
sse.model <- sum((gam.model$y - gam.model$fitted.values)^2)
sse.nullmodel <- sum((gam.nullmodel$y - gam.nullmodel$fitted.values)^2)
partialRsq <- (sse.nullmodel - sse.model)/sse.nullmodel
### effect direction
if(gam.cov.tvalue < 0){ #if the gam t-value for covariate of interest is less than 0, make the partialRsq negative
partialRsq <- partialRsq*-1}
results <- cbind(parcel, gam.cov.tvalue, gam.cov.pvalue, anova.cov.pvalue, partialRsq)
return(results)
}
#### FIT GAM SMOOTH WITH A COVARIATE OF INTEREST ####
##Function to fit a GAM (measure ~ s(smooth_var, k = knots, fx = set_fx) + covariate of interest + control covariates)) and save out statistics for the first covariate
gam.fit.covariate <- function(gam.data, measure, atlas, dataset, region, smooth_var, covariate.interest, covariates.noninterest, knots, set_fx = FALSE){
#Fit the gam
dataname <- sprintf("%s.%s.%s", measure, atlas, dataset)
gam.data <- get(dataname)
parcel <- region
region <- str_replace(region, "-", ".")
modelformula <- as.formula(sprintf("%s ~ s(%s, k = %s, fx = %s) + %s + %s", region, smooth_var, knots, set_fx, covariate.interest, covariates.noninterest))
gam.model <- gam(modelformula, method = "REML", data=gam.data)
gam.results <- summary(gam.model)
#GAM statistics
#t-value for the covariate of interest term and GAM-based significance of this term
gam.cov.tvalue <- gam.results$p.table[2,3]
#GAM based significance of the term
gam.cov.pvalue <- gam.results$p.table[2,4]
#Calculate the magnitude and significance of the covariate of interest effect by comparing full and reduced models
##Compare a full model GAM (with the covariate of interst) to a nested, reduced model (without covariate of interst)
nullmodel <- as.formula(sprintf("%s ~ s(%s, k = %s, fx = %s) + %s", region, smooth_var, knots, set_fx, covariates.noninterest))
gam.nullmodel <- gam(nullmodel, method = "REML", data=gam.data)
gam.nullmodel.results <- summary(gam.nullmodel)
##Full versus reduced model anova p-value
anova.cov.pvalue <- anova.gam(gam.nullmodel,gam.model,test='Chisq')$`Pr(>Chi)`[2]
if(is.na(anova.cov.pvalue)){ #if residual deviance is exactly equal between full and reduced models and p=value = NA, set p = 1
anova.cov.pvalue <- 1}
##Full versus reduced model direction-dependent partial R squared
### effect size
sse.model <- sum((gam.model$y - gam.model$fitted.values)^2)
sse.nullmodel <- sum((gam.nullmodel$y - gam.nullmodel$fitted.values)^2)
partialRsq <- (sse.nullmodel - sse.model)/sse.nullmodel
### effect direction
if(gam.cov.tvalue < 0){ #if the gam t-value for covariate of interest is less than 0, make the partialRsq negative
partialRsq <- partialRsq*-1}
results <- cbind(parcel, gam.cov.tvalue, gam.cov.pvalue, anova.cov.pvalue, partialRsq)
return(results)
}
gam.ef.schaefer200 <- matrix(data=NA, nrow=200, ncol=5) #matrix to save gam.fit.covariate output to
for(row in c(1:nrow(schaefer200x17.parcel.labels))){ #for each schaefer region
region <- schaefer200.parcel.labels$label[row]
GAM.RESULTS <- gam.fit.covariate(measure = "GBC", atlas = "schaefer200", dataset = dataset, region = region, smooth_var = "age", covariate.interest = "NAR_F1_Exec_Comp_Cog_Accuracy", covariates.noninterest = "sex + meanFD_avgSes", knots = 3, set_fx = TRUE) #run the gam.fit.covariate function
gam.ef.schaefer200[row,] <- GAM.RESULTS} #and append results to output df
GBC.schaefer200.PNC$sex <- as.factor(GBC.schaefer200.PNC$sex)
gam.ef.schaefer200 <- matrix(data=NA, nrow=200, ncol=5) #matrix to save gam.fit.covariate output to
for(row in c(1:nrow(schaefer200x17.parcel.labels))){ #for each schaefer region
region <- schaefer200.parcel.labels$label[row]
GAM.RESULTS <- gam.fit.covariate(measure = "GBC", atlas = "schaefer200", dataset = dataset, region = region, smooth_var = "age", covariate.interest = "NAR_F1_Exec_Comp_Cog_Accuracy", covariates.noninterest = "sex + meanFD_avgSes", knots = 3, set_fx = TRUE) #run the gam.fit.covariate function
gam.ef.schaefer200[row,] <- GAM.RESULTS #and append results to output df
}
gam.fit.covariate <- function(measure, atlas, dataset, region, smooth_var, covariate.interest, covariates.noninterest, knots, set_fx = FALSE){
#Fit the gam
dataname <- sprintf("%s.%s.%s", measure, atlas, dataset)
gam.data <- get(dataname)
parcel <- region
region <- str_replace(region, "-", ".")
modelformula <- as.formula(sprintf("%s ~ s(%s, k = %s, fx = %s) + %s + %s", region, smooth_var, knots, set_fx, covariate.interest, covariates.noninterest))
gam.model <- gam(modelformula, method = "REML", data=gam.data)
gam.results <- summary(gam.model)
#GAM statistics
#t-value for the covariate of interest term and GAM-based significance of this term
gam.cov.tvalue <- gam.results$p.table[2,3]
#GAM based significance of the term
gam.cov.pvalue <- gam.results$p.table[2,4]
#Calculate the magnitude and significance of the covariate of interest effect by comparing full and reduced models
##Compare a full model GAM (with the covariate of interst) to a nested, reduced model (without covariate of interst)
nullmodel <- as.formula(sprintf("%s ~ s(%s, k = %s, fx = %s) + %s", region, smooth_var, knots, set_fx, covariates.noninterest))
gam.nullmodel <- gam(nullmodel, method = "REML", data=gam.data)
gam.nullmodel.results <- summary(gam.nullmodel)
##Full versus reduced model anova p-value
anova.cov.pvalue <- anova.gam(gam.nullmodel,gam.model,test='Chisq')$`Pr(>Chi)`[2]
if(is.na(anova.cov.pvalue)){ #if residual deviance is exactly equal between full and reduced models and p=value = NA, set p = 1
anova.cov.pvalue <- 1}
##Full versus reduced model direction-dependent partial R squared
### effect size
sse.model <- sum((gam.model$y - gam.model$fitted.values)^2)
sse.nullmodel <- sum((gam.nullmodel$y - gam.nullmodel$fitted.values)^2)
partialRsq <- (sse.nullmodel - sse.model)/sse.nullmodel
### effect direction
if(gam.cov.tvalue < 0){ #if the gam t-value for covariate of interest is less than 0, make the partialRsq negative
partialRsq <- partialRsq*-1}
results <- cbind(parcel, gam.cov.tvalue, gam.cov.pvalue, anova.cov.pvalue, partialRsq)
return(results)
}
# Fit GAM model for cognition effect
gam.ef.schaefer200 <- matrix(data=NA, nrow=200, ncol=5) #matrix to save gam.fit.covariate output to
for(row in c(1:nrow(schaefer200x17.parcel.labels))){ #for each schaefer region
region <- schaefer200.parcel.labels$label[row]
GAM.RESULTS <- gam.fit.covariate(measure = "GBC", atlas = "schaefer200", dataset = dataset, region = region, smooth_var = "age", covariate.interest = "NAR_F1_Exec_Comp_Cog_Accuracy", covariates.noninterest = "sex + meanFD_avgSes", knots = 3, set_fx = TRUE) #run the gam.fit.covariate function
gam.ef.schaefer200[row,] <- GAM.RESULTS #and append results to output df
}
measure = "GBC"
atlas = "schaefer200"
dataset
dataset = dataset
region = region
smooth_var = "age"
covariate.interest = "NAR_F1_Exec_Comp_Cog_Accuracy"
covariates.noninterest = "sex + meanFD_avgSes
knots = 3
covariate.interest = "NAR_F1_Exec_Comp_Cog_Accuracy"
covariates.noninterest = "sex + meanFD_avgSes"
knots = 3
set_fx = TRUE
dataname <- sprintf("%s.%s.%s", measure, atlas, dataset)
gam.data <- get(dataname)
parcel <- region
region <- str_replace(region, "-", ".")
modelformula <- as.formula(sprintf("%s ~ s(%s, k = %s, fx = %s) + %s + %s", region, smooth_var, knots, set_fx, covariate.interest, covariates.noninterest))
gam.model <- gam(modelformula, method = "REML", data=gam.data)
gam.results <- summary(gam.model)
gam.results
gam.cov.tvalue <- gam.results$p.table[2,3]
#GAM based significance of the term
gam.cov.pvalue <- gam.results$p.table[2,4]
#Calculate the magnitude and significance of the covariate of interest effect by comparing full and reduced models
##Compare a full model GAM (with the covariate of interst) to a nested, reduced model (without covariate of interst)
nullmodel <- as.formula(sprintf("%s ~ s(%s, k = %s, fx = %s) + %s", region, smooth_var, knots, set_fx, covariates.noninterest))
gam.nullmodel <- gam(nullmodel, method = "REML", data=gam.data)
gam.nullmodel.results <- summary(gam.nullmodel)
anova.cov.pvalue <- anova.gam(gam.nullmodel,gam.model,test='Chisq')$`Pr(>Chi)`[2]
gam.nullmodel
gam.model
anova.gam(gam.nullmodel,gam.model,test='Chisq')$`Pr(>Chi)`[2]
