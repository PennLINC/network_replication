if(str_detect(atlas, "schaefer")) {
atlas_name <- str_extract(atlas, "schaefer[0-9]")
atlas_name <- paste0(atlas_name, "17")
} else {
atlas_name <- atlas
}
matrixName <- paste0(ses_name, "_", atlas_name, "_conn")
connect.matrix <- connect.matrix[[matrixName]]
}
if (atlas == "glasser"){
edge <- read.csv("/cbica/projects/network_replication/atlases/edge/glasser_edge.csv")
} else if (atlas == "gordon"){
edge <- read.csv("/cbica/projects/network_replication/atlases/edge/gordon_edge.csv")
}  else if(atlas == "schaefer200x7"){
edge <- read.csv("/cbica/projects/network_replication/atlases/edge/schaefer200x7_edge.csv")
} else if(atlas == "schaefer400x7"){
edge <- read.csv("/cbica/projects/network_replication/atlases/edge/schaefer400x7_edge.csv")
} else if(atlas == "schaefer200x17"){
edge <- read.csv("/cbica/projects/network_replication/atlases/edge/schaefer200x17_edge.csv")
} else if(atlas == "schaefer400x17"){
edge <- read.csv("/cbica/projects/network_replication/atlases/edge/schaefer400x17_edge.csv")
} else {
print("Please provide valid atlas (glasser, gordon, schaefer200, or schaefer400")
}
# set upper triangle of matrix to 9999 and vectorize the matrix
mat <- connect.matrix
mat[upper.tri(mat, diag=TRUE)] <- 9999
connect.vector <- c(mat)
connect.vector <- connect.vector[-c(which(connect.vector==9999))]
# connect.vector <- connect.vector[-c(which(connect.vector==1))] # remove edges that connect the same parcel to itself
print(paste(which(participants %in% subject), "/", length(participants), "-", atlas))
return(connect.vector)
}
extractParcel2ParcelConn <- function(subject, atlas, dataset){
#read in connectivity matrix  # need to fix to make more efficient
if(dataset == "PNC" | dataset=="HCPD" | dataset=="HBN") {
connect.matrix <- readRDS(sprintf("/cbica/projects/network_replication/input/%1$s/connMatricesData/connectivity_matrices/%2$s_ConnMatrices.RData", dataset, subject))
if(str_detect(atlas, "schaefer200") | str_detect(atlas, "schaefer400")) {
atlas_name <- paste0(str_extract(atlas, "schaefer[0-9]"), "17")
} else {
atlas_name <- atlas
}
connect.matrix <- connect.matrix[[paste0(atlas_name, "_conn")]]
} else if(dataset == "NKI") { #check if BAS1 exists for subject
connect.matrix <- readRDS(sprintf("/cbica/projects/network_replication/input/NKI/connMatricesData/connectivity_matrices/%1$s_ConnMatrices.RData", subject))
ses_name <- str_extract(names(connect.matrix), "[A-Z]{3}1")[1]
if(str_detect(atlas, "schaefer")) {
atlas_name <- str_extract(atlas, "schaefer[0-9]")
atlas_name <- paste0(atlas_name, "17")
} else {
atlas_name <- atlas
}
matrixName <- paste0(ses_name, "_", atlas_name, "_conn")
connect.matrix <- connect.matrix[[matrixName]]
}
if (atlas == "glasser"){
edge <- read.csv("/cbica/projects/network_replication/atlases/edge/glasser_edge.csv")
} else if (atlas == "gordon"){
edge <- read.csv("/cbica/projects/network_replication/atlases/edge/gordon_edge.csv")
}  else if(atlas == "schaefer200x7"){
edge <- read.csv("/cbica/projects/network_replication/atlases/edge/schaefer200x7_edge.csv")
} else if(atlas == "schaefer400x7"){
edge <- read.csv("/cbica/projects/network_replication/atlases/edge/schaefer400x7_edge.csv")
} else if(atlas == "schaefer200x17"){
edge <- read.csv("/cbica/projects/network_replication/atlases/edge/schaefer200x17_edge.csv")
} else if(atlas == "schaefer400x17"){
edge <- read.csv("/cbica/projects/network_replication/atlases/edge/schaefer400x17_edge.csv")
} else {
print("Please provide valid atlas (glasser, gordon, schaefer200, or schaefer400")
}
# set upper triangle of matrix to 9999 and vectorize the matrix
mat <- connect.matrix
mat[upper.tri(mat, diag=TRUE)] <- 9999 #added diag=TRUE for troubleshooting
connect.vector <- c(mat)
connect.vector <- connect.vector[-c(which(connect.vector==9999))]
# connect.vector <- connect.vector[-c(which(connect.vector==1))] # remove edges that connect the same parcel to itself
print(paste(which(participants %in% subject), "/", length(participants), "-", atlas))
return(connect.vector)
}
glasser_output <- extractParcel2ParcelConn("sub-NDARCE721YB5", "glasser", "HBN")
length(glasser_output)
which(glasser_output==1)
glasser_edgeLabels <- read.csv("/cbica/projects/network_replication/atlases/edge/glasser_edge.csv")
gordon_edgeLabels <- read.csv("/cbica/projects/network_replication/atlases/edge/gordon_edge.csv")
schaefer200x7_edgeLabels <- read.csv("/cbica/projects/network_replication/atlases/edge/schaefer200x7_edge.csv")
schaefer400x7_edgeLabels <- read.csv("/cbica/projects/network_replication/atlases/edge/schaefer400x7_edge.csv")
library(stringr)
library(dplyr)
glasser_edgeLabels[47034]
glasser_edgeLabels
glasser_edgeLabels[2,47034]
glasser_edgeLabels[47034,2]
gordon_output <- extractParcel2ParcelConn("sub-NDARCE721YB5", "gordon", "HBN")
length(gordon_output)
which(gordon_output==1)
gordon_edgeLabels[c(which(gordon_output==1)),2] #R_TGv_ROI_to_L_TGv_ROI
schaefer200x7_output <- extractParcel2ParcelConn("sub-NDARCE721YB5", "schaefer200x7", "HBN")
length(schaefer200x7_output)
schaefer200x7_edgeLabels[c(which(schaefer200x7_output==1)),2] # 66 edges
length(schaefer200x7_output)
schaefer200x7_output
which(schaefer200x7_output==1)
schaefer400x7_output <- extractParcel2ParcelConn("sub-NDARCE721YB5", "schaefer400x7", "HBN")
length(schaefer400x7_output)
schaefer400x7_edgeLabels[c(which(schaefer400x7_output==1)),2]
gordon_edgeLabels[c(which(gordon_output==1)),2] # 66 edges
schaefer400x7_edgeLabels[c(which(schaefer400x7_output==1)),2] # none
# 2) load the timeseries data for "sub-NDARCE721YB5" (schaefer400x7)
schaefer400x7_rest_run1 <- read_cifti("/cbica/projects/network_replication/input/HBN/HBN_xcp/sub-NDARCE721YB5/sub-NDARCE721YB5_ses-HBNsiteRU_task-rest_run-1_space-fsLR_atlas-Schaefer417_den-91k_timeseries.ptseries.nii")
library(cifti)
# 2) load the timeseries data for "sub-NDARCE721YB5" (schaefer400x7)
schaefer400x7_rest_run1 <- read_cifti("/cbica/projects/network_replication/input/HBN/HBN_xcp/sub-NDARCE721YB5/sub-NDARCE721YB5_ses-HBNsiteRU_task-rest_run-1_space-fsLR_atlas-Schaefer417_den-91k_timeseries.ptseries.nii")
timeseries <- schaefer400x7_rest_run1$data
timeseries
dim(timeseries)
timeseries
t(timeseries)
nrow(timeseries)
timeseries[1,]
timeseries[2,]
schaefer400x7_rest_run1$Parcel
names(schaefer400x7_rest_run1$Parcel)
schaefer400x7_edgeLabels[c(which(schaefer400x7_output==1)),2] # none
which(str_detect(names(schaefer400x7_rest_run1$Parcel), "LH_Limbic_OFC_3"))
names(schaefer400x7_rest_run1$Parcel)
schaefer200x17_output <- extractParcel2ParcelConn("sub-NDARCE721YB5", "schaefer200x17", "HBN")
length(schaefer200x17_output)
schaefer200x17_edgeLabels[c(which(schaefer200x17_output==1)),2] # none
schaefer200x17_edgeLabels <- read.csv("/cbica/projects/network_replication/atlases/edge/schaefer200x17_edge.csv")
schaefer400x17_edgeLabels <- read.csv("/cbica/projects/network_replication/atlases/edge/schaefer400x17_edge.csv")
schaefer200x17_output <- extractParcel2ParcelConn("sub-NDARCE721YB5", "schaefer200x17", "HBN")
length(schaefer200x17_output)
schaefer200x17_edgeLabels[c(which(schaefer200x17_output==1)),2] # none
## schaefer400x17: limbic_OFC and tempPole
schaefer400x17_output <- extractParcel2ParcelConn("sub-NDARCE721YB5", "schaefer400x17", "HBN")
length(schaefer400x17_output)
schaefer400x17_edgeLabels[c(which(schaefer400x17_output==1)),2] #
which(str_detect(names(schaefer400x7_rest_run1$Parcel), "LH_LimbicB_OFC_3"))
which(str_detect(names(schaefer400x7_rest_run1$Parcel), "LH_LimbicA_TempPole_1"))
which(str_detect(names(schaefer400x7_rest_run1$Parcel), "RH_LimbicB_OFC_6"))
timeseries[111,]
schaefer400x17_edgeLabels[c(which(schaefer400x17_output==1)),2] #
LH_LimbicA_TempPole_1
LH_LimbicA_TempPole_1 <- timeseries[114]
LH_LimbicA_TempPole_1
LH_LimbicA_TempPole_1 <- timeseries[114,]
LH_LimbicA_TempPole_1
# LH_LimbicB_OFC_3 (row 111), LH_LimbicA_TempPole_1 (row 114), RH_LimbicB_OFC_6 (row 318)
which(str_detect(names(schaefer400x7_rest_run1$Parcel), "RH_LimbicB_OFC_6"))
RH_LimbicB_OFC_6 <- timeseries[318,]
seq(1, 375,1 )
data <- data.frame(cbind(seq(1, 375,1)), LH_LimbicB_OFC_3, LH_LimbicA_TempPole_1)
LH_LimbicB_OFC_3 <- timeseries[111,]
LH_LimbicA_TempPole_1 <- timeseries[114,
data <- data.frame(cbind(seq(1, 375,1)), LH_LimbicB_OFC_3, LH_LimbicA_TempPole_1)
data
data <- data.frame(cbind(seq(1, 375,1)), LH_LimbicB_OFC_3, LH_LimbicA_TempPole_1))
data <- data.frame(cbind(seq(1, 375,1), LH_LimbicB_OFC_3, LH_LimbicA_TempPole_1))
data
data
names(data)[1] <- "timepoint"
meltdf <- melt(data,id="timepoint")
library(reshape2)
meltdf <- melt(data,id="timepoint")
meltdf
ggplot(meltdf,aes(x=timepoint,y=value,colour=variable,group=variable)) + geom_line()
library(ggplot2)
ggplot(meltdf,aes(x=timepoint,y=value,colour=variable,group=variable)) + geom_line()
RH_LimbicB_OFC_6
data <- data.frame(cbind(seq(1, 375,1), LH_LimbicB_OFC_3, LH_LimbicA_TempPole_1, RH_LimbicB_OFC_6))
names(data)[1] <- "timepoint"
meltdf <- melt(data,id="timepoint")
ggplot(meltdf,aes(x=timepoint,y=value,colour=variable,group=variable)) + geom_line()
schaefer400x17_edgeLabels
# LH_LimbicB_OFC_3 (row 111), LH_LimbicA_TempPole_1 (row 114), RH_LimbicB_OFC_6 (row 318)
which(str_detect(names(schaefer400x7_rest_run1$Parcel), "LH_VisCent_ExStr_2"))
LH_LimbicB_OFC_3 <- timeseries[111,]
LH_LimbicA_TempPole_1 <- timeseries[114,]
RH_LimbicB_OFC_6 <- timeseries[318,]
LH_VisCent_ExStr_2 <- timeseries[2,]
data <- data.frame(cbind(seq(1, 375,1), LH_LimbicB_OFC_3, LH_LimbicA_TempPole_1, RH_LimbicB_OFC_6, LH_VisCent_ExStr_2))
names(data)[1] <- "timepoint"
meltdf <- melt(data,id="timepoint")
ggplot(meltdf,aes(x=timepoint,y=value,colour=variable,group=variable)) + geom_line()
schaefer400x17_edgeLabels[c(which(schaefer400x17_output==1)),2] #
ggplot(meltdf,aes(x=timepoint,y=value,colour=variable,group=variable)) + geom_line()
data <- data.frame(cbind(seq(1, 375,1), LH_LimbicB_OFC_3, LH_LimbicA_TempPole_1, LH_VisCent_ExStr_2))
names(data)[1] <- "timepoint"
meltdf <- melt(data,id="timepoint")
ggplot(meltdf,aes(x=timepoint,y=value,colour=variable,group=variable)) + geom_line()
schaefer400x17_edgeLabels[c(which(schaefer400x17_output>9)),2] #
schaefer400x17_edgeLabels[c(which(schaefer400x17_output>.9)),2] #
# LH_LimbicB_OFC_3 (row 111), LH_LimbicA_TempPole_1 (row 114), RH_LimbicB_OFC_6 (row 318)
which(str_detect(names(schaefer400x7_rest_run1$Parcel), "RH_SomMotA_6"))
# LH_LimbicB_OFC_3 (row 111), LH_LimbicA_TempPole_1 (row 114), RH_LimbicB_OFC_6 (row 318)
which(str_detect(names(schaefer400x7_rest_run1$Parcel), "LH_SomMotB_Cent_3"))
which(str_detect(names(schaefer400x7_rest_run1$Parcel), "LH_SomMotB_Cent_3"))
LH_LimbicB_OFC_3 <- timeseries[111,]
LH_LimbicA_TempPole_1 <- timeseries[114,]
RH_LimbicB_OFC_6 <- timeseries[318,]
LH_SomMotB_Cent_3 <- timeseries[57,]
data <- data.frame(cbind(seq(1, 375,1), LH_LimbicB_OFC_3, LH_LimbicA_TempPole_1, LH_SomMotB_Cent_3))
names(data)[1] <- "timepoint"
meltdf <- melt(data,id="timepoint")
ggplot(meltdf,aes(x=timepoint,y=value,colour=variable,group=variable)) + geom_line()
schaefer400x17_edgeLabels[c(which(schaefer400x17_output==1)),2] #
schaefer400x17_edgeLabels[c(which(schaefer400x17_output==1)),2] #
schaefer400x17_edgeLabels
schaefer400x7_rest_run1$Parcel
names(schaefer400x7_rest_run1$Parcel)
dim(schaefer400x7_rest_run1$data)
class(schaefer400x7_rest_run1$Parcel)
class(schaefer400x7_rest_run1$Parcel$`17Networks_LH_VisCent_ExStr_1`)
timeseries
dim(timeseries)
timeseries[111,]
# LH_LimbicB_OFC_3 (row 111), LH_LimbicA_TempPole_1 (row 114), RH_LimbicB_OFC_6 (row 318)
which(str_detect(names(schaefer400x7_rest_run1$Parcel), "LH_LimbicB_OFC_3"))
# LH_LimbicB_OFC_3 (row 111), LH_LimbicA_TempPole_1 (row 114), RH_LimbicB_OFC_6 (row 318)
which(str_detect(names(schaefer400x7_rest_run1$Parcel), "LH_LimbicA_TempPole_1"))
ggplot(meltdf,aes(x=timepoint,y=value,colour=variable,group=variable)) + geom_line()
cor(LH_LimbicB_OFC_3, LH_LimbicA_TempPole_1)
cor.test(LH_LimbicB_OFC_3, LH_LimbicA_TempPole_1)
HBN_CIFTI_summary  <- readRDS("/cbica/projects/network_replication/input/HBN/sample_selection/HBN_FinalSample_withCUBIDS_20230223.RData")
participants <- unique(HBN_CIFTI_summary[[1]]$sub)
# paths to all the cifti files (task carit, emotion, guessing, rest for each atlas)
HBN_CIFTI_filepaths <- HBN_CIFTI_summary[[2]]$path
subject="sub-NDARCE721YB5"
HBN_CIFTI_filepaths <- HBN_CIFTI_summary[[2]]$path
HBN_CIFTI_filepaths
subject
which(str_detect(HBN_CIFTI_filepaths, "sub-NDARCE721YB5"))
list_filepath= HBN_CIFTI_filepaths
ciftiFiles_df = HBN_CIFTI_summary
index_filepath <- which(str_detect(list_filepath, subject))
atlas <- gsub("atlas-", "", str_extract(list_filepath[index_filepath], "atlas-[a-zA-Z0-9]+"))
task <- gsub("task-", "", str_extract(list_filepath[index_filepath], "task-[a-zA-Z]+"))
run <- str_extract(list_filepath[index_filepath], "run-[1-2]")
run <- unlist(lapply(run, replace_na, ""))
library(tidyr)
schaefer417_names <- names(cifti_list)[grep("Schaefer417", names(cifti_list))]
index_filepath <- which(str_detect(list_filepath, subject))
atlas <- gsub("atlas-", "", str_extract(list_filepath[index_filepath], "atlas-[a-zA-Z0-9]+"))
task <- gsub("task-", "", str_extract(list_filepath[index_filepath], "task-[a-zA-Z]+"))
run <- str_extract(list_filepath[index_filepath], "run-[1-2]")
run <- unlist(lapply(run, replace_na, ""))
run <- gsub("run", "_run", run)
cifti_list <- lapply(list_filepath[index_filepath], read_cifti) # creates list of cifti files in atlas order for each participant
cifti_names <- as.data.frame(cbind(subject, atlas, task, run))
cifti_names <- cifti_names %>% mutate(ciftiList_names = paste0(subject, "_", task, run, "_", atlas))
names(cifti_list) <- cifti_names$ciftiList_names
print(paste(which(participants == subject), "/", length(participants), "Cifti list done for", subject))
schaefer417_names <- names(cifti_list)[grep("Schaefer417", names(cifti_list))]
timeseries_schaefer417 <- lapply(schaefer417_names, loadCiftiTimeseries, cifti_list)
loadCiftiTimeseries <- function(name, cifti) {
timeseries <- cifti[[name]]$data
timeseries <- t(timeseries)
colnames(timeseries) <- names(cifti[[name]]$Parcel) #
return(timeseries)
}
## This function concatenates the timeseries then creates connectivity matrix
### @param list_timeseries A list of timeseries from each available acquisition for a given subject to concatenate
makeConnMatrix <- function(list_timeseries){
rbound <- do.call(rbind, list_timeseries)
browser()
corr_matrix <- round(cor(rbound, use = "complete.obs"), 5)
return(corr_matrix)
}
loadCiftiTimeseries <- function(name, cifti) {
timeseries <- cifti[[name]]$data
timeseries <- t(timeseries)
colnames(timeseries) <- names(cifti[[name]]$Parcel) #
browser()
return(timeseries)
}
### @param list_timeseries A list of timeseries from each available acquisition for a given subject to concatenate
makeConnMatrix <- function(list_timeseries){
rbound <- do.call(rbind, list_timeseries)
browser()
corr_matrix <- round(cor(rbound, use = "complete.obs"), 5)
return(corr_matrix)
}
schaefer417_names <- names(cifti_list)[grep("Schaefer417", names(cifti_list))]
timeseries_schaefer417 <- lapply(schaefer417_names, loadCiftiTimeseries, cifti_list)
View(timeseries)
View(timeseries)
timeseries
cifti_names
dim(cifti_list$`sub-NDARCE721YB5_movieDM_Schaefer417`$data)
loadCiftiTimeseries <- function(name, cifti) {
timeseries <- cifti[[name]]$data
timeseries <- t(timeseries)
colnames(timeseries) <- names(cifti[[name]]$Parcel) #
browser()
return(timeseries)
}
schaefer417_names <- names(cifti_list)[grep("Schaefer417", names(cifti_list))]
timeseries_schaefer417 <- lapply(schaefer417_names, loadCiftiTimeseries, cifti_list)
dim(timeseries)
loadCiftiTimeseries <- function(name, cifti) {
timeseries <- cifti[[name]]$data
timeseries <- t(timeseries)
colnames(timeseries) <- names(cifti[[name]]$Parcel) #
#browser()
return(timeseries)
}
schaefer417_names <- names(cifti_list)[grep("Schaefer417", names(cifti_list))]
timeseries_schaefer417 <- lapply(schaefer417_names, loadCiftiTimeseries, cifti_list)
schaefer417_conn <- makeConnMatrix(timeseries_schaefer417)
print(paste(subject, ":", "schaefer417_conn made"))
View(rbound)
dim(rbound)
makeConnMatrix <- function(list_timeseries){
rbound <- do.call(rbind, list_timeseries)
#browser()
corr_matrix <- round(cor(rbound, use = "complete.obs"), 5)
return(corr_matrix)
}
makeConnMatrix <- function(list_timeseries){
rbound <- do.call(rbind, list_timeseries)
#browser()
corr_matrix <- round(cor(rbound, use = "complete.obs"), 5)
return(corr_matrix)
}
schaefer217_names <- names(cifti_list)[grep("Schaefer217", names(cifti_list))]
timeseries_schaefer217 <- lapply(schaefer217_names, loadCiftiTimeseries, cifti_list)
list_timeseries=timeseries_schaefer217
rbound <- do.call(rbind, list_timeseries)
library(stringr)
library(dplyr)
library(cifti)
library(reshape2)
library(ggplot2)
extractParcel2ParcelConn <- function(subject, atlas, dataset){
#read in connectivity matrix  # need to fix to make more efficient
if(dataset == "PNC" | dataset=="HCPD" | dataset=="HBN") {
connect.matrix <- readRDS(sprintf("/cbica/projects/network_replication/input/%1$s/connMatricesData/connectivity_matrices/%2$s_ConnMatrices.RData", dataset, subject))
if(str_detect(atlas, "schaefer200") | str_detect(atlas, "schaefer400")) {
atlas_name <- paste0(str_extract(atlas, "schaefer[0-9]"), "17")
} else {
atlas_name <- atlas
}
connect.matrix <- connect.matrix[[paste0(atlas_name, "_conn")]]
} else if(dataset == "NKI") { #check if BAS1 exists for subject
connect.matrix <- readRDS(sprintf("/cbica/projects/network_replication/input/NKI/connMatricesData/connectivity_matrices/%1$s_ConnMatrices.RData", subject))
ses_name <- str_extract(names(connect.matrix), "[A-Z]{3}1")[1]
if(str_detect(atlas, "schaefer")) {
atlas_name <- str_extract(atlas, "schaefer[0-9]")
atlas_name <- paste0(atlas_name, "17")
} else {
atlas_name <- atlas
}
matrixName <- paste0(ses_name, "_", atlas_name, "_conn")
connect.matrix <- connect.matrix[[matrixName]]
}
if (atlas == "glasser"){
edge <- read.csv("/cbica/projects/network_replication/atlases/edge/glasser_edge.csv")
} else if (atlas == "gordon"){
edge <- read.csv("/cbica/projects/network_replication/atlases/edge/gordon_edge.csv")
}  else if(atlas == "schaefer200x7"){
edge <- read.csv("/cbica/projects/network_replication/atlases/edge/schaefer200x7_edge.csv")
} else if(atlas == "schaefer400x7"){
edge <- read.csv("/cbica/projects/network_replication/atlases/edge/schaefer400x7_edge.csv")
} else if(atlas == "schaefer200x17"){
edge <- read.csv("/cbica/projects/network_replication/atlases/edge/schaefer200x17_edge.csv")
} else if(atlas == "schaefer400x17"){
edge <- read.csv("/cbica/projects/network_replication/atlases/edge/schaefer400x17_edge.csv")
} else {
print("Please provide valid atlas (glasser, gordon, schaefer200, or schaefer400")
}
# set upper triangle of matrix to 9999 and vectorize the matrix
mat <- connect.matrix
mat[upper.tri(mat, diag=TRUE)] <- 9999 #added diag=TRUE for troubleshooting (test diag=FALSE)
connect.vector <- c(mat)
connect.vector <- connect.vector[-c(which(connect.vector==9999))]
# connect.vector <- connect.vector[-c(which(connect.vector==1))] # remove edges that connect the same parcel to itself
print(paste(which(participants %in% subject), "/", length(participants), "-", atlas))
return(connect.vector)
}
glasser_edgeLabels <- read.csv("/cbica/projects/network_replication/atlases/edge/glasser_edge.csv")
gordon_edgeLabels <- read.csv("/cbica/projects/network_replication/atlases/edge/gordon_edge.csv")
schaefer200x17_edgeLabels <- read.csv("/cbica/projects/network_replication/atlases/edge/schaefer200x17_edge.csv")
schaefer400x17_edgeLabels <- read.csv("/cbica/projects/network_replication/atlases/edge/schaefer400x17_edge.csv")
cor.test(LH_LimbicB_OFC_3, LH_LimbicA_TempPole_1)
dim(rbound)
rbound
dim(rbound)
subject
schaefer417_names <- names(cifti_list)[grep("Schaefer417", names(cifti_list))]
timeseries_schaefer417 <- lapply(schaefer417_names, loadCiftiTimeseries, cifti_list)
dim(timeseries_schaefer417)
length(timeseries_schaefer417)
timeseries_schaefer417
length(timeseries_schaefer417[[1]])
loadCiftiTimeseries <- function(name, cifti) {
timeseries <- cifti[[name]]$data
timeseries <- t(timeseries)
colnames(timeseries) <- names(cifti[[name]]$Parcel) #
#browser()
return(timeseries)
}
## This function concatenates the timeseries then creates connectivity matrix
### @param list_timeseries A list of timeseries from each available acquisition for a given subject to concatenate
makeConnMatrix <- function(list_timeseries){
rbound <- do.call(rbind, list_timeseries)
#browser()
corr_matrix <- round(cor(rbound, use = "complete.obs"), 5)
return(corr_matrix)
}
schaefer417_names
library(dplyr)
library(tidyverse)
library(magrittr)
library(reshape)
library(reshape2)
library(MASS)
library(stargazer)
library(cifti)
library(ggplot2)
library(ggpubr)
# Calculate scan time for each subject
collated_HBN.xcp_headMotion <- read.csv("/cbica/projects/network_replication/input/HBN/sample_selection/collated_HBN.xcp_headMotion_20230222.csv")
collated_HBN.xcp_headMotion[c(which(collated_HBN.xcp_headMotion$sub =="sub-NDARCE721YB5")),]
collated_HBN.xcp_medExclusion[c(which(collated_HBN.xcp_medExclusion$sub =="sub-NDARCE721YB5")),]
collated_HBN.xcp <- read.csv("/cbica/projects/network_replication/input/HBN/sample_selection/HBN_xcp_qc.csv")
names(collated_HBN.xcp) <- collated_HBN.xcp[2,]
sub <- collated_HBN.xcp$sub[c(which(str_detect(collated_HBN.xcp$sub, "NDA")))]
#length(unique(sub))
motionDV_rows <- c(which(str_detect(collated_HBN.xcp$sub, "motionDV")))
motionDVnum_rows <- c(which(str_detect(collated_HBN.xcp$sub, "motionDV"))+2)
collated_HBN.xcp <- collated_HBN.xcp[-c(motionDV_rows, motionDVnum_rows),]
toDelete <- seq(2, nrow(collated_HBN.xcp), 2)
collated_HBN.xcp <- collated_HBN.xcp[-c(toDelete),]
collated_HBN.xcp$variant_info <- NA
#if have a variant for rest scans, need to move columns over 2 columns
# fix variants' and rest scans formatting
# task variant
# rest variant (if there are multiple runs)
for (i in c(1:nrow(collated_HBN.xcp))) {
if (str_detect(collated_HBN.xcp$space[i], "[A]+") &
str_detect(collated_HBN.xcp$meanFD[i], "91k")) { # for task variants (including ABCD) and rest variants with only 1 run
collated_HBN.xcp$variant_info[i] <- collated_HBN.xcp$space[i]
collated_HBN.xcp$space[i] <- collated_HBN.xcp$den[i]
collated_HBN.xcp$den[i] <- collated_HBN.xcp$meanFD[i]
collated_HBN.xcp$meanFD[i] <- collated_HBN.xcp$relMeansRMSMotion[i]
collated_HBN.xcp$relMeansRMSMotion[i] <- collated_HBN.xcp$relMaxRMSMotion[i]
print(paste(collated_HBN.xcp$sub[i], "task variant or rest variant with 1 run"))
} else if (str_detect(collated_HBN.xcp$task[i], "rest") &
str_detect(collated_HBN.xcp$meanFD[i], "91k") &
str_detect(collated_HBN.xcp$space[i], "[0-4]") &
!str_detect(collated_HBN.xcp$space[i], "VARIANT")) {  # for regular rest scans that have > 1 run
collated_HBN.xcp$variant_info[i] <- NA
collated_HBN.xcp$task[i] <- paste0( collated_HBN.xcp$task[i], "_run-", collated_HBN.xcp$space[i])
collated_HBN.xcp$space[i] <- collated_HBN.xcp$den[i]
collated_HBN.xcp$den[i] <- collated_HBN.xcp$meanFD[i]
collated_HBN.xcp$meanFD[i] <- collated_HBN.xcp$relMeansRMSMotion[i]
collated_HBN.xcp$relMeansRMSMotion[i] <- collated_HBN.xcp$relMaxRMSMotion[i]
print(paste(collated_HBN.xcp$sub[i], "rest scan with > 1 run"))
} else if (collated_HBN.xcp$space[i] == "fsLR"){
collated_HBN.xcp$variant_info[i] <- NA # for regular scans
collated_HBN.xcp$space[i] <- collated_HBN.xcp$space[i]
collated_HBN.xcp$den[i] <- collated_HBN.xcp$den[i]
collated_HBN.xcp$meanFD[i] <- collated_HBN.xcp$meanFD[i]
collated_HBN.xcp$relMeansRMSMotion[i] <- collated_HBN.xcp$relMeansRMSMotion[i]
print(paste(collated_HBN.xcp$sub[i], "Regular scan"))
} else if (str_detect(collated_HBN.xcp$meanFD[i], "fsLR")) { # for rest variants with > 1 run
collated_HBN.xcp$variant_info[i] <- collated_HBN.xcp$space[i]
collated_HBN.xcp$task[i] <- paste0( collated_HBN.xcp$task[i], "_run-", collated_HBN.xcp$den[i])
collated_HBN.xcp$space[i] <- collated_HBN.xcp$meanFD[i]
collated_HBN.xcp$den[i] <- collated_HBN.xcp$relMeansRMSMotion[i]
collated_HBN.xcp$meanFD[i] <- collated_HBN.xcp$relMaxRMSMotion[i]
collated_HBN.xcp$relMeansRMSMotion[i] <- collated_HBN.xcp$meanDVInit[i]
print(paste(collated_HBN.xcp$sub[i], "rest variant with > 1 run"))
}  else {
print("Check conditionals")
}
}
collated_HBN.xcp$sub <- paste0("sub-", collated_HBN.xcp$sub)
collated_HBN.xcp$meanFD <- as.numeric(collated_HBN.xcp$meanFD)
collated_HBN.xcp$relMeansRMSMotion <- as.numeric(collated_HBN.xcp$relMeansRMSMotion)
collated_HBN.xcp_medExclusion <- collated_HBN.xcp
collated_HBN.xcp_medExclusion[c(which(collated_HBN.xcp_medExclusion$sub =="sub-NDARCE721YB5")),]
timeseries_schaefer417 <- lapply(schaefer417_names, loadCiftiTimeseries, cifti_list)
schaefer417_names
name=schaefer417_names
cift=cifti_list
timeseries <- cifti[[name]]$data
cifti=cifti_list
timeseries <- cifti[[name]]$data
timeseries <- t(timeseries)
cifti[[name]]$data
cifti_list[1]
cifti=cifti_list[[1]]
timeseries <- cifti[[name]]$data
cifti <- cifti_list
name
name <- schaefer417_names[1]
name
timeseries <- cifti[[name]]$data
timeseries <- t(timeseries)
colnames(timeseries) <- names(cifti[[name]]$Parcel)
timeseries
schaefer417_names <- names(cifti_list)[grep("Schaefer417", names(cifti_list))]
timeseries_schaefer417 <- lapply(schaefer417_names, loadCiftiTimeseries, cifti_list)
list_timeseries=timeseries_schaefer417
rbound <- do.call(rbind, list_timeseries)
rbound
data.frame(rbound)
rbound_df <- data.frame(rbound)
cor.test(rbound_df$X17Networks_LH_LimbicB_OFC_3, rbound_df$X17Networks_LH_LimbicA_TempPole_1)
cbind(rbound_df$X17Networks_LH_LimbicB_OFC_3, rbound_df$X17Networks_LH_LimbicA_TempPole_1)
schaefer417_names
