if(str_detect(atlas, "schaefer200") | str_detect(atlas, "schaefer400")) {
atlas_name <- paste0(str_extract(atlas, "schaefer[0-9]"), "17")
} else {
atlas_name <- atlas
}
connect.matrix <- connect.matrix[[paste0(atlas_name, "_conn")]]
} else if(dataset == "NKI") {
connect.matrix <- readRDS(sprintf("/cbica/projects/network_replication/input/NKI/connMatricesData/connectivity_matrices/%1$s_ConnMatrices.RData", subject))
ses_name <- str_extract(names(connect.matrix), "[A-Z]{3}1")[1]
if((str_detect(atlas, "schaefer200") | str_detect(atlas, "schaefer400")) {
print(paste("loading", atlas, "connectivity matrices"))
#read in connectivity matrix
if (dataset == "PNC" | dataset == "HCPD" | dataset == "HBN") {
connect.matrix <- readRDS(sprintf("/cbica/projects/network_replication/input/%1$s/connMatricesData/connectivity_matrices/%2$s_ConnMatrices.RData",dataset, subject))
if (str_detect(atlas, "schaefer200") | str_detect(atlas, "schaefer400")) {
atlas_name <- paste0(str_extract(atlas, "schaefer[0-9]"), "17")
} else {
atlas_name <- atlas
}
connect.matrix <- connect.matrix[[paste0(atlas_name, "_conn")]]
} else if(dataset == "NKI") {
connect.matrix <- readRDS(sprintf("/cbica/projects/network_replication/input/NKI/connMatricesData/connectivity_matrices/%1$s_ConnMatrices.RData", subject))
ses_name <- str_extract(names(connect.matrix), "[A-Z]{3}1")[1]
if(str_detect(atlas, "schaefer200") | str_detect(atlas, "schaefer400")) {
atlas_name <- paste0(str_extract(atlas, "schaefer[0-9]"), "17")
} else {
atlas_name <- atlas
}
connect.matrix <- connect.matrix[[paste0(ses_name, "_", atlas_name, "_conn")]]
} else {
print("Provide valid dataset")
}
if (atlas == "gordon"){
parcel.labels <- read.csv("/cbica/projects/network_replication/atlases/parcellations/gordon_regionlist_final.csv")
communityAffil <- read.csv("/cbica/projects/network_replication/atlases/parcellations/Gordon333_Network/gordon333CommunityAffiliation_final.csv")
parcel.labels <- as.data.frame(cbind(parcel.labels$label, communityAffil$CommAffil))
names(parcel.labels) <- c("label", "network")
## make dataframe where rownames are the commAffil number, and then need to transpose V1 to be rows
rows <- as.data.frame(t(parcel.labels$network))
commAffil_mat <- as.data.frame(rows[rep(seq_len(nrow(rows)), each = 333), ])
rownames(commAffil_mat) <- NULL
} else if(str_detect(atlas, "schaefer200x7")){
parcel.labels <- read.csv("/cbica/projects/network_replication/atlases/parcellations/schaefer200x7_regionlist_final.csv")
communityAffil <- read.csv("/cbica/projects/network_replication/atlases/parcellations/Schaefer_7Network/schaefer200x7CommunityAffiliation_final.csv")
parcel.labels <- data.frame(cbind(parcel.labels$label, communityAffil$CommAffil))
names(parcel.labels) <- c("label", "network")
rows <- as.data.frame(t(parcel.labels$network))
commAffil_mat <- as.data.frame(rows[rep(seq_len(nrow(rows)), each = 200), ])
rownames(commAffil_mat) <- NULL
} else if(str_detect(atlas, "schaefer200x17")){
parcel.labels <- read.csv("/cbica/projects/network_replication/atlases/parcellations/schaefer200x17_regionlist_final.csv")
communityAffil <- read.csv("/cbica/projects/network_replication/atlases/parcellations/Schaefer_17Network/schaefer200x17CommunityAffiliation_final.csv")
parcel.labels <- data.frame(cbind(parcel.labels$label, communityAffil$CommAffil))
names(parcel.labels) <- c("label", "network")
rows <- as.data.frame(t(parcel.labels$network))
commAffil_mat <- as.data.frame(rows[rep(seq_len(nrow(rows)), each = 200), ])
rownames(commAffil_mat) <- NULL
} else if(str_detect(atlas, "schaefer400x7")){
parcel.labels <- read.csv("/cbica/projects/network_replication/atlases/parcellations/schaefer400x7_regionlist_final.csv")
communityAffil <- read.csv("/cbica/projects/network_replication/atlases/parcellations/Schaefer_7Network/schaefer400x7CommunityAffiliation_final.csv")
parcel.labels <- data.frame(cbind(parcel.labels$label, communityAffil$CommAffil))
names(parcel.labels) <- c("label", "network")
rows <- as.data.frame(t(parcel.labels$network))
commAffil_mat <- as.data.frame(rows[rep(seq_len(nrow(rows)), each = 400), ])
rownames(commAffil_mat) <- NULL
} else if(str_detect(atlas, "schaefer400x17")){
parcel.labels <- read.csv("/cbica/projects/network_replication/atlases/parcellations/schaefer400x17_regionlist_final.csv")
communityAffil <- read.csv("/cbica/projects/network_replication/atlases/parcellations/Schaefer_17Network/schaefer400x17CommunityAffiliation_final.csv")
parcel.labels <- data.frame(cbind(parcel.labels$label, communityAffil$CommAffil))
names(parcel.labels) <- c("label", "network")
rows <- as.data.frame(t(parcel.labels$network))
commAffil_mat <- as.data.frame(rows[rep(seq_len(nrow(rows)), each = 400), ])
rownames(commAffil_mat) <- NULL
} else {
print("Please provide valid atlas gordon, schaefer200x7, schaefer200x17, schaefer400x7, or schaefer400x17")
}
if(metric == "BNC"){
BNC <- c()
for (i in 1:nrow(connect.matrix)) {
between_network_values <- c()
BNC_per_node <- c()
for (j in 1:length(connect.matrix[i,])) {  # entire  row
if(is.na(connect.matrix[i,j]) || connect.matrix[i,j] == 1) { # add NA if identity
between_network_values <- append(between_network_values, NA);
} else if (parcel.labels$network[i] != commAffil_mat[i,j]) {
between_network_values <- append(between_network_values, connect.matrix[i,j])
} else if (parcel.labels$network[i] == commAffil_mat[i,j]) {
between_network_values <- append(between_network_values, NA)
} else {
print("Bug in BNC calculation ")
}
}
#print(between_network_values)
BNC_per_node <- append(BNC_per_node, mean(between_network_values, na.rm=TRUE))
#print(BNC_per_node) # 1 value
BNC <- append(BNC, BNC_per_node)
metric_toReturn <- BNC
}
BNC <- c()
for (i in 1:nrow(connect.matrix)) {
between_network_values <- c()
BNC_per_node <- c()
for (j in 1:length(connect.matrix[i,])) {  # entire  row
if(is.na(connect.matrix[i,j]) || connect.matrix[i,j] == 1) { # add NA if identity
between_network_values <- append(between_network_values, NA);
} else if (parcel.labels$network[i] != commAffil_mat[i,j]) {
between_network_values <- append(between_network_values, connect.matrix[i,j])
} else if (parcel.labels$network[i] == commAffil_mat[i,j]) {
between_network_values <- append(between_network_values, NA)
} else {
print("Bug in BNC calculation ")
}
}
#print(between_network_values)
BNC_per_node <- append(BNC_per_node, mean(between_network_values, na.rm=TRUE))
#print(BNC_per_node) # 1 value
BNC <- append(BNC, BNC_per_node)
metric_toReturn <- BNC
}
library(dplyr)
library(tidyverse)
library(magrittr)
library(reshape)
library(reshape2)
library(MASS)
library(stargazer)
library(cifti)
library(ggplot2)
library(ggpubr)
#forgot to include age -- adding age
final_dem_restOnly_df <- read.csv("/cbica/projects/network_replication/input/PNC/sample_selection/PNC_demographics_finalsample_restOnly_20230103.csv")
length(which(final_dem_restOnly_df$sex=="F")
length(which(final_dem_restOnly_df$sex=="F"))
length(which(final_dem_restOnly_df$sex=="Female"))
inal_dem_restOnly_df$sex
#forgot to include age -- adding age
final_dem_restOnly_df <- read.csv("/cbica/projects/network_replication/input/PNC/sample_selection/PNC_demographics_finalsample_restOnly_20230103.csv")
final_dem_restOnly_df
length(which(final_dem_restOnly_df$sex==2))
#install.packages("/cbica/projects/network_replication/software/covBat_gam/ComBatFamily_0.1.0.tar.gz", repos=NULL, type='source')
library(ComBatFamily)
library(dplyr)
library(mgcv)
atlases_GBC <- c("glasser", "gordon", "schaefer200", "schaefer400")
atlases <- c("gordon", "schaefer200x7", "schaefer200x17", "schaefer400x7", "schaefer400x17")
dataset <- "HBN"
participants <- read.csv("/cbica/projects/network_replication/input/HBN/sample_selection/HBN_demographics_finalsample_202230223.csv")
#GBC - loads GBC_subxparcel_glasser, GBC_subxparcel_gordon, GBC_subxparcel_schaefer200, GBC_subxparcel_schaefer400
metric = "GBC"
for(i in c(1:length(atlases_GBC))){
df_name <- paste0(metric, "_", "subxparcel_", atlases_GBC[i])
assign(df_name, read.csv(sprintf("/cbica/projects/network_replication/output/%1$s/%2$s/%2$s_subxparcel_matrix_%3$s.csv", dataset, metric, atlases_GBC[i])))
assign(df_name, data.frame(get(df_name)[,-1]))
#assign(row.names(get(df_name)), subjects)
print(df_name)
}
metric = "GBC"
for(i in c(1:length(atlases_GBC))){
df_name <- paste0(metric, "_", "subxparcel_", atlases_GBC[i])
assign(df_name, read.csv(sprintf("/cbica/projects/network_replication/adapted_Rscripts/HBN_scripts/ConnMatrices_scripts/HBN_GBC/%1$s_subxparcel_matrix_%2$s.csv", metric, atlases_GBC[i])))
#assign(df_name, read.csv(sprintf("/cbica/projects/network_replication/output/%1$s/%2$s/%2$s_subxparcel_matrix_%3$s.csv", dataset, metric, atlases_GBC[i])))
assign(df_name, data.frame(get(df_name)[,-1]))
#assign(row.names(get(df_name)), subjects)
print(df_name)
}
row.names(GBC_subxparcel_glasser) <- participants$sub
row.names(GBC_subxparcel_gordon) <- participants$sub
row.names(GBC_subxparcel_schaefer200) <- participants$sub
row.names(GBC_subxparcel_schaefer400) <- participants$sub
age_vec <- participants$interview_age/12
sex_vec <- as.factor(participants$sex)
meanFD_avgSes_vec <- participants$meanFD_avgSes
covar_df <- bind_cols(participants$sub, as.numeric(age_vec), as.factor(sex_vec), as.numeric(meanFD_avgSes_vec))
meanFD_avgSes_vec
length(meanFD_avgSes_vec)
length(sex_vec)
length(age_vec)
participants$age
age_vec <- participants$age
sex_vec <- as.factor(participants$sex)
meanFD_avgSes_vec <- participants$meanFD_avgSes
covar_df <- bind_cols(participants$sub, as.numeric(age_vec), as.factor(sex_vec), as.numeric(meanFD_avgSes_vec))
covar_df <- dplyr::rename(covar_df, sub=...1,
age = ...2,
sex = ...3,
meanFD_avgSes = ...4)
batch <- participants$site
# Harmonize GBC
data.harmonized_GBC <- lapply(list(GBC_subxparcel_glasser, GBC_subxparcel_gordon, GBC_subxparcel_schaefer200, GBC_subxparcel_schaefer400), covfam, bat = as.factor(participants$site), covar = covar_df, gam, y ~ s(age, k=3, fx=T) + as.factor(sex) + meanFD_avgSes)
participants$site
participants
batch <- participants$ses
# Harmonize GBC
data.harmonized_GBC <- lapply(list(GBC_subxparcel_glasser, GBC_subxparcel_gordon, GBC_subxparcel_schaefer200, GBC_subxparcel_schaefer400), covfam, bat = as.factor(participants$site), covar = covar_df, gam, y ~ s(age, k=3, fx=T) + as.factor(sex) + meanFD_avgSes)
batch <- participants$ses
# Harmonize GBC
data.harmonized_GBC <- lapply(list(GBC_subxparcel_glasser, GBC_subxparcel_gordon, GBC_subxparcel_schaefer200, GBC_subxparcel_schaefer400), covfam, bat = as.factor(participants$ses), covar = covar_df, gam, y ~ s(age, k=3, fx=T) + as.factor(sex) + meanFD_avgSes)
as.factor(participants$ses)
participants$sex
meanFD_avgSes
participants$meanFD_avgSes
age_vec <- participants$age
sex_vec <- as.factor(participants$sex)
meanFD_avgSes_vec <- participants$meanFD_avgSes
covar_df <- bind_cols(participants$sub, as.numeric(age_vec), as.factor(sex_vec), as.numeric(meanFD_avgSes_vec))
covar_df <- dplyr::rename(covar_df, sub=...1,
age = ...2,
sex = ...3,
meanFD_avgSes = ...4)
#batch <- participants$ses
# Harmonize GBC
data.harmonized_GBC <- lapply(list(GBC_subxparcel_glasser, GBC_subxparcel_gordon, GBC_subxparcel_schaefer200, GBC_subxparcel_schaefer400), covfam, bat = as.factor(participants$ses), covar = covar_df, gam, y ~ s(age, k=3, fx=T) + as.factor(sex) + meanFD_avgSes)
GBC_subxparcel_glasser
GBC_subxparcel_gordon
GBC_subxparcel_schaefer200
GBC_subxparcel_schaefer400
# Harmonize GBC
data.harmonized_GBC <- lapply(list(GBC_subxparcel_glasser, GBC_subxparcel_gordon, GBC_subxparcel_schaefer200, GBC_subxparcel_schaefer400), covfam, bat = as.factor(participants$ses), covar = covar_df, gam, y ~ s(age, k=3, fx=T) + as.factor(sex) + as.numeric(meanFD_avgSes))
atlases_GBC
atlases_GBC
#install.packages("/cbica/projects/network_replication/software/covBat_gam/ComBatFamily_0.1.0.tar.gz", repos=NULL, type='source')
library(ComBatFamily)
library(dplyr)
library(mgcv)
atlases_GBC <- c("glasser", "gordon", "schaefer200", "schaefer400")
atlases <- c("gordon", "schaefer200x7", "schaefer200x17", "schaefer400x7", "schaefer400x17")
dataset <- "HBN"
participants <- read.csv("/cbica/projects/network_replication/input/HBN/sample_selection/HBN_demographics_finalsample_202230223.csv")
#GBC - loads GBC_subxparcel_glasser, GBC_subxparcel_gordon, GBC_subxparcel_schaefer200, GBC_subxparcel_schaefer400
metric = "GBC"
for(i in c(1:length(atlases_GBC))){
df_name <- paste0(metric, "_", "subxparcel_", atlases_GBC[i])
assign(df_name, read.csv(sprintf("/cbica/projects/network_replication/adapted_Rscripts/HBN_scripts/ConnMatrices_scripts/HBN_GBC/%1$s_subxparcel_matrix_%2$s.csv", metric, atlases_GBC[i])))
#assign(df_name, read.csv(sprintf("/cbica/projects/network_replication/output/%1$s/%2$s/%2$s_subxparcel_matrix_%3$s.csv", dataset, metric, atlases_GBC[i])))
assign(df_name, data.frame(get(df_name)[,-1]))
#assign(row.names(get(df_name)), subjects)
print(df_name)
}
row.names(GBC_subxparcel_glasser) <- participants$sub
row.names(GBC_subxparcel_gordon) <- participants$sub
row.names(GBC_subxparcel_schaefer200) <- participants$sub
row.names(GBC_subxparcel_schaefer400) <- participants$sub
age_vec <- participants$age
sex_vec <- as.factor(participants$sex)
meanFD_avgSes_vec <- participants$meanFD_avgSes
covar_df <- bind_cols(participants$sub, as.numeric(age_vec), as.factor(sex_vec), as.numeric(meanFD_avgSes_vec))
covar_df <- dplyr::rename(covar_df, sub=...1,
age = ...2,
sex = ...3,
meanFD_avgSes = ...4)
#batch <- participants$ses
# Harmonize GBC
data.harmonized_GBC <- lapply(list(GBC_subxparcel_glasser, GBC_subxparcel_gordon, GBC_subxparcel_schaefer200, GBC_subxparcel_schaefer400), covfam, bat = as.factor(participants$ses), covar = covar_df, gam, y ~ s(age, k=3, fx=T) + as.factor(sex) + as.numeric(meanFD_avgSes))
which(is.na(participants$age ))
which(is.na(participants$sex ))
which(is.na(participants$meanFD_avgSes ))
participants
participants[c(which(is.na(participants$age ))),]
participants[c(which(is.na(participants$age ))),] # age not collected on
participants <- participants[-c(which(is.na(participants$age ))),] #age not collected on 58 participants
sex_vec <- as.factor(participants$sex)
meanFD_avgSes_vec <- participants$meanFD_avgSes
covar_df <- bind_cols(participants$sub, as.numeric(age_vec), as.factor(sex_vec), as.numeric(meanFD_avgSes_vec))
participants <- participants[-c(which(is.na(participants$age ))),] #age not collected on 58 participants
age_vec <- participants$age
sex_vec <- as.factor(participants$sex)
meanFD_avgSes_vec <- participants$meanFD_avgSes
covar_df <- bind_cols(participants$sub, as.numeric(age_vec), as.factor(sex_vec), as.numeric(meanFD_avgSes_vec))
covar_df <- dplyr::rename(covar_df, sub=...1,
age = ...2,
sex = ...3,
meanFD_avgSes = ...4)
#batch <- participants$ses
# Harmonize GBC
data.harmonized_GBC <- lapply(list(GBC_subxparcel_glasser, GBC_subxparcel_gordon, GBC_subxparcel_schaefer200, GBC_subxparcel_schaefer400), covfam, bat = as.factor(participants$ses), covar = covar_df, gam, y ~ s(age, k=3, fx=T) + as.factor(sex) + as.numeric(meanFD_avgSes))
participants <- read.csv("/cbica/projects/network_replication/input/HBN/sample_selection/HBN_demographics_finalsample_202230223.csv")
participants <- participants[-c(which(is.na(participants$age ))),] #age not collected on 58 participants
test <- read.csv(sprintf("/cbica/projects/network_replication/adapted_Rscripts/HBN_scripts/ConnMatrices_scripts/HBN_GBC/%1$s_subxparcel_matrix_%2$s.csv", "GBC", "glasser"))
test
participants$sub[-c(which(is.na(participants$age)))]
participants <- read.csv("/cbica/projects/network_replication/input/HBN/sample_selection/HBN_demographics_finalsample_202230223.csv")
participants$sub[-c(which(is.na(participants$age)))]
participants_noAge <- participants$sub[-c(which(is.na(participants$age)))]
participants_noAge_index <- c(which(is.na(participants$age)))
participants <- read.csv("/cbica/projects/network_replication/input/HBN/sample_selection/HBN_demographics_finalsample_202230223.csv")
participants_noAge_index <- c(which(is.na(participants$age)))
participants <- participants[-c(which(is.na(participants$age))),] #age not collected on 58 participants
participants_noAge_index
GBC_subxparcel_glasser <- GBC_subxparcel_glasser[-c(which(participants_noAge_index)),]
GBC_subxparcel_glasser <- GBC_subxparcel_glasser[-participants_noAge_index,]
GBC_subxparcel_glasser
dim(GBC_subxparcel_glasser)
participants_noAge_index
58+1438
58-1438
participants <- read.csv("/cbica/projects/network_replication/input/HBN/sample_selection/HBN_demographics_finalsample_202230223.csv")
participants_noAge_index <- c(which(is.na(participants$age))) #age not collected on 58 participants
participants <- participants[-c(which(is.na(participants$age))),]
#GBC - loads GBC_subxparcel_glasser, GBC_subxparcel_gordon, GBC_subxparcel_schaefer200, GBC_subxparcel_schaefer400
metric = "GBC"
for(i in c(1:length(atlases_GBC))){
df_name <- paste0(metric, "_", "subxparcel_", atlases_GBC[i])
assign(df_name, read.csv(sprintf("/cbica/projects/network_replication/adapted_Rscripts/HBN_scripts/ConnMatrices_scripts/HBN_GBC/%1$s_subxparcel_matrix_%2$s.csv", metric, atlases_GBC[i])))
#assign(df_name, read.csv(sprintf("/cbica/projects/network_replication/output/%1$s/%2$s/%2$s_subxparcel_matrix_%3$s.csv", dataset, metric, atlases_GBC[i])))
assign(df_name, data.frame(get(df_name)[,-1]))
#assign(row.names(get(df_name)), subjects)
print(df_name)
}
GBC_subxparcel_glasser <- GBC_subxparcel_glasser[-participants_noAge_index,]
row.names(GBC_subxparcel_glasser) <- participants$sub
GBC_subxparcel_gordon <- GBC_subxparcel_gordon[-participants_noAge_index,]
row.names(GBC_subxparcel_gordon) <- participants$sub
GBC_subxparcel_schaefer200 <- GBC_subxparcel_schaefer200[-participants_noAge_index,]
row.names(GBC_subxparcel_schaefer200) <- participants$sub
GBC_subxparcel_schaefer400 <- GBC_subxparcel_schaefer400[-participants_noAge_index,]
row.names(GBC_subxparcel_schaefer400) <- participants$sub
age_vec <- participants$age
sex_vec <- as.factor(participants$sex)
meanFD_avgSes_vec <- participants$meanFD_avgSes
covar_df <- bind_cols(participants$sub, as.numeric(age_vec), as.factor(sex_vec), as.numeric(meanFD_avgSes_vec))
covar_df <- dplyr::rename(covar_df, sub=...1,
age = ...2,
sex = ...3,
meanFD_avgSes = ...4)
#batch <- participants$ses
# Harmonize GBC
data.harmonized_GBC <- lapply(list(GBC_subxparcel_glasser, GBC_subxparcel_gordon, GBC_subxparcel_schaefer200, GBC_subxparcel_schaefer400), covfam, bat = as.factor(participants$ses), covar = covar_df, gam, y ~ s(age, k=3, fx=T) + as.factor(sex) + as.numeric(meanFD_avgSes))
names(data.harmonized_GBC) <- atlases_GBC
#GBC - save out covbat harmonized connectivity metrics
metric = "GBC"
for(i in c(1:length(atlases_GBC))){
df_name <- paste0(metric, "_", "subxparcel_", atlases_GBC[i], "_covbat")
assign(df_name, data.frame(data.harmonized_GBC[[atlases_GBC[i]]]$dat.covbat))
write.csv(get(df_name), sprintf("/cbica/projects/network_replication/adapted_Rscripts/HBN_scripts/ConnMatrices_scripts/HBN_GBC/%1$s_subxparcel_matrix_%2$s_covbat.csv", metric, atlases_GBC[i]))
#write.csv(get(df_name), sprintf("/cbica/projects/network_replication/output/%1$s/%2$s/%2$s_subxparcel_matrix_%3$s_covbat.csv", dataset, metric, atlases_GBC[i]))
print(df_name)
}
library(dplyr)
library(tidyverse)
library(magrittr)
library(reshape)
library(reshape2)
library(MASS)
library(stargazer)
library(cifti)
library(ggplot2)
library(ggpubr)
demographics <- read.table("/cbica/projects/network_replication/input/HBN/sample_selection/participants.tsv", header=T)
demographics <- dplyr::rename(demographics, sub = participant_id) # 2611 total
range(demographics$age, na.rm=TRUE) #ages 5-22
demographics <- demographics[-c(which(is.na(demographics$age))),]
collated_HBN.xcp <- read.csv("/cbica/projects/network_replication/input/HBN/sample_selection/HBN_xcp_qc.csv")
names(collated_HBN.xcp) <- collated_HBN.xcp[2,]
sub <- collated_HBN.xcp$sub[c(which(str_detect(collated_HBN.xcp$sub, "NDA")))]
#length(unique(sub))
motionDV_rows <- c(which(str_detect(collated_HBN.xcp$sub, "motionDV")))
motionDVnum_rows <- c(which(str_detect(collated_HBN.xcp$sub, "motionDV"))+2)
collated_HBN.xcp <- collated_HBN.xcp[-c(motionDV_rows, motionDVnum_rows),]
toDelete <- seq(2, nrow(collated_HBN.xcp), 2)
collated_HBN.xcp <- collated_HBN.xcp[-c(toDelete),]
collated_HBN.xcp$variant_info <- NA
which(collated_HBN.xcp$sub=="NDARPW577WJ7")
old_collated_HBN.xcp[c(which(old_collated_HBN.xcp$sub=="NDARPW577WJ7")),]
collated_HBN.xcp <- read.csv("/cbica/projects/network_replication/input/HBN/sample_selection/HBN_xcp_qc.csv")
names(collated_HBN.xcp) <- collated_HBN.xcp[2,]
sub <- collated_HBN.xcp$sub[c(which(str_detect(collated_HBN.xcp$sub, "NDA")))]
#length(unique(sub))
motionDV_rows <- c(which(str_detect(collated_HBN.xcp$sub, "motionDV")))
motionDVnum_rows <- c(which(str_detect(collated_HBN.xcp$sub, "motionDV"))+2)
collated_HBN.xcp <- collated_HBN.xcp[-c(motionDV_rows, motionDVnum_rows),]
toDelete <- seq(2, nrow(collated_HBN.xcp), 2)
collated_HBN.xcp <- collated_HBN.xcp[-c(toDelete),]
collated_HBN.xcp$variant_info <- NA
#if have a variant for rest scans, need to move columns over 2 columns
# fix variants' and rest scans formatting
# task variant
# rest variant (if there are multiple runs)
for (i in c(1:nrow(collated_HBN.xcp))) {
if (str_detect(collated_HBN.xcp$space[i], "[A]+") &
str_detect(collated_HBN.xcp$meanFD[i], "91k")) { # for task variants (including ABCD) and rest variants with only 1 run
collated_HBN.xcp$variant_info[i] <- collated_HBN.xcp$space[i]
collated_HBN.xcp$space[i] <- collated_HBN.xcp$den[i]
collated_HBN.xcp$den[i] <- collated_HBN.xcp$meanFD[i]
collated_HBN.xcp$meanFD[i] <- collated_HBN.xcp$relMeansRMSMotion[i]
collated_HBN.xcp$relMeansRMSMotion[i] <- collated_HBN.xcp$relMaxRMSMotion[i]
print(paste(collated_HBN.xcp$sub[i], "task variant or rest variant with 1 run"))
} else if (str_detect(collated_HBN.xcp$task[i], "rest") &
str_detect(collated_HBN.xcp$meanFD[i], "91k") &
str_detect(collated_HBN.xcp$space[i], "[0-4]") &
!str_detect(collated_HBN.xcp$space[i], "VARIANT")) {  # for regular rest scans that have > 1 run
collated_HBN.xcp$variant_info[i] <- NA
collated_HBN.xcp$task[i] <- paste0( collated_HBN.xcp$task[i], "_run-", collated_HBN.xcp$space[i])
collated_HBN.xcp$space[i] <- collated_HBN.xcp$den[i]
collated_HBN.xcp$den[i] <- collated_HBN.xcp$meanFD[i]
collated_HBN.xcp$meanFD[i] <- collated_HBN.xcp$relMeansRMSMotion[i]
collated_HBN.xcp$relMeansRMSMotion[i] <- collated_HBN.xcp$relMaxRMSMotion[i]
print(paste(collated_HBN.xcp$sub[i], "rest scan with > 1 run"))
} else if (collated_HBN.xcp$space[i] == "fsLR"){
collated_HBN.xcp$variant_info[i] <- NA # for regular scans
collated_HBN.xcp$space[i] <- collated_HBN.xcp$space[i]
collated_HBN.xcp$den[i] <- collated_HBN.xcp$den[i]
collated_HBN.xcp$meanFD[i] <- collated_HBN.xcp$meanFD[i]
collated_HBN.xcp$relMeansRMSMotion[i] <- collated_HBN.xcp$relMeansRMSMotion[i]
print(paste(collated_HBN.xcp$sub[i], "Regular scan"))
} else if (str_detect(collated_HBN.xcp$meanFD[i], "fsLR")) { # for rest variants with > 1 run
collated_HBN.xcp$variant_info[i] <- collated_HBN.xcp$space[i]
collated_HBN.xcp$task[i] <- paste0( collated_HBN.xcp$task[i], "_run-", collated_HBN.xcp$den[i])
collated_HBN.xcp$space[i] <- collated_HBN.xcp$meanFD[i]
collated_HBN.xcp$den[i] <- collated_HBN.xcp$relMeansRMSMotion[i]
collated_HBN.xcp$meanFD[i] <- collated_HBN.xcp$relMaxRMSMotion[i]
collated_HBN.xcp$relMeansRMSMotion[i] <- collated_HBN.xcp$meanDVInit[i]
print(paste(collated_HBN.xcp$sub[i], "rest variant with > 1 run"))
}  else {
print("Check conditionals")
}
}
collated_HBN.xcp$sub <- paste0("sub-", collated_HBN.xcp$sub)
collated_HBN.xcp$meanFD <- as.numeric(collated_HBN.xcp$meanFD)
collated_HBN.xcp$relMeansRMSMotion <- as.numeric(collated_HBN.xcp$relMeansRMSMotion)
length(unique(collated_HBN.xcp$sub)) # 2255 participants before head motion QC
dim(collated_HBN.xcp) #6915 scans
HBN_FinalSample_CUBIDS <- readRDS("/cbica/projects/network_replication/input/HBN/sample_selection/HBN_FinalSample_withCUBIDS_20230223.RData")
final_participants <- data.frame(unique(HBN_FinalSample_CUBIDS$sub))
names(final_participants) <- "sub"
unique(HBN_FinalSample_CUBIDS$sub)
HBN_FinalSample_CUBIDS <- readRDS("/cbica/projects/network_replication/input/HBN/sample_selection/HBN_FinalSample_withCUBIDS_20230223.RData")
HBN_FinalSample_CUBIDS
unique(HBN_FinalSample_CUBIDS[[1]]$sub)
length(unique(HBN_FinalSample_CUBIDS[[1]]$sub))
final_participants <- data.frame(unique(HBN_FinalSample_CUBIDS[[1]]$sub))
names(final_participants) <- "sub"
final_demographics <- merge(demographics, final_participants, by = "sub")
## include average of relMeansRMSMotion and meanFD across the acquisitions included in calculating connectivity matrix
# for each subject, take average relMeansRMSMotion and meanFD
subject <- c()
ses <- c()
avg_relMeansRMSMotion_vec <- c()
avg_meanFD_vec <- c()
for(i in c(1:length(unique(HBN_FinalSample_CUBIDS$sub)))){
indices <- which(HBN_FinalSample_CUBIDS$sub == unique(HBN_FinalSample_CUBIDS$sub)[i])
avg_RMS <- mean(as.numeric(HBN_FinalSample_CUBIDS$relMeansRMSMotion[indices]))
avg_meanFD <- mean(as.numeric(HBN_FinalSample_CUBIDS$meanFD[indices]))
subject <- append(subject, unique(HBN_FinalSample_CUBIDS$sub)[i])
ses <- append(ses,HBN_FinalSample_CUBIDS$ses[indices[1]])
avg_relMeansRMSMotion_vec <- append(avg_relMeansRMSMotion_vec, avg_RMS)
avg_meanFD_vec <- append(avg_meanFD_vec, avg_meanFD)
}
HBN_avgMotion <- data.frame(cbind(subject, ses, avg_meanFD_vec, avg_relMeansRMSMotion_vec))
names(HBN_avgMotion) <- c("sub", "ses", "meanFD_avgSes", "relMeansRMSMotion_avgSes")
HBN_FinalSample_CUBIDS
HBN_FinalSample_CUBIDS <- readRDS("/cbica/projects/network_replication/input/HBN/sample_selection/HBN_FinalSample_withCUBIDS_20230223.RData")
final_participants <- data.frame(unique(HBN_FinalSample_CUBIDS[[1]]$sub))
names(final_participants) <- "sub"
final_demographics <- merge(demographics, final_participants, by = "sub")
## include average of relMeansRMSMotion and meanFD across the acquisitions included in calculating connectivity matrix
# for each subject, take average relMeansRMSMotion and meanFD
subject <- c()
ses <- c()
avg_relMeansRMSMotion_vec <- c()
avg_meanFD_vec <- c()
for(i in c(1:length(unique(HBN_FinalSample_CUBIDS[[1]]$sub)))){
indices <- which(HBN_FinalSample_CUBIDS[[1]]$sub == unique(HBN_FinalSample_CUBIDS[[1]]$sub)[i])
avg_RMS <- mean(as.numeric(HBN_FinalSample_CUBIDS[[1]]$relMeansRMSMotion[indices]))
avg_meanFD <- mean(as.numeric(HBN_FinalSample_CUBIDS[[1]]$meanFD[indices]))
subject <- append(subject, unique(HBN_FinalSample_CUBID[[1]]S$sub)[i])
HBN_FinalSample_CUBIDS[[1]]$sub
HBN_FinalSample_CUBIDS[[1]]$sub
HBN_FinalSample_CUBIDS[[1]]$relMeansRMSMotion
HBN_FinalSample_CUBIDS[[1]]$meanFD
HBN_FinalSample_CUBID[[1]]S$sub
HBN_FinalSample_CUBIDS[[1]]$ses
## include average of relMeansRMSMotion and meanFD across the acquisitions included in calculating connectivity matrix
# for each subject, take average relMeansRMSMotion and meanFD
subject <- c()
ses <- c()
avg_relMeansRMSMotion_vec <- c()
avg_meanFD_vec <- c()
for(i in c(1:length(unique(HBN_FinalSample_CUBIDS[[1]]$sub)))){
indices <- which(HBN_FinalSample_CUBIDS[[1]]$sub == unique(HBN_FinalSample_CUBIDS[[1]]$sub)[i])
avg_RMS <- mean(as.numeric(HBN_FinalSample_CUBIDS[[1]]$relMeansRMSMotion[indices]))
avg_meanFD <- mean(as.numeric(HBN_FinalSample_CUBIDS[[1]]$meanFD[indices]))
subject <- append(subject, unique(HBN_FinalSample_CUBID[[1]]$sub)[i])
ses <- append(ses,HBN_FinalSample_CUBIDS[[1]]$ses[indices[1]])
avg_relMeansRMSMotion_vec <- append(avg_relMeansRMSMotion_vec, avg_RMS)
avg_meanFD_vec <- append(avg_meanFD_vec, avg_meanFD)
}
## include average of relMeansRMSMotion and meanFD across the acquisitions included in calculating connectivity matrix
# for each subject, take average relMeansRMSMotion and meanFD
subject <- c()
ses <- c()
avg_relMeansRMSMotion_vec <- c()
avg_meanFD_vec <- c()
for(i in c(1:length(unique(HBN_FinalSample_CUBIDS[[1]]$sub)))){
indices <- which(HBN_FinalSample_CUBIDS[[1]]$sub == unique(HBN_FinalSample_CUBIDS[[1]]$sub)[i])
avg_RMS <- mean(as.numeric(HBN_FinalSample_CUBIDS[[1]]$relMeansRMSMotion[indices]))
avg_meanFD <- mean(as.numeric(HBN_FinalSample_CUBIDS[[1]]$meanFD[indices]))
subject <- append(subject, unique(HBN_FinalSample_CUBIDS[[1]]$sub)[i])
ses <- append(ses,HBN_FinalSample_CUBIDS[[1]]$ses[indices[1]])
avg_relMeansRMSMotion_vec <- append(avg_relMeansRMSMotion_vec, avg_RMS)
avg_meanFD_vec <- append(avg_meanFD_vec, avg_meanFD)
}
HBN_avgMotion <- data.frame(cbind(subject, ses, avg_meanFD_vec, avg_relMeansRMSMotion_vec))
names(HBN_avgMotion) <- c("sub", "ses", "meanFD_avgSes", "relMeansRMSMotion_avgSes")
HBN_avgMotion$meanFD_avgSes <- as.numeric(HBN_avgMotion$meanFD_avgSes)
HBN_avgMotion$relMeansRMSMotion_avgSes <- as.numeric(HBN_avgMotion$relMeansRMSMotion_avgSes)
final_dem_df <- merge(final_demographics, HBN_avgMotion, by="sub")
write.csv(final_dem_df, "/cbica/projects/network_replication/input/HBN/sample_selection/HBN_demographics_finalsample_202230226.csv")
# write.csv(final_dem_df, "/cbica/projects/network_replication/input/HBN/sample_selection/HBN_demographics_finalsample_202230226.csv")
# final_dem_df <- read.csv("/cbica/projects/network_replication/input/HBN/sample_selection/HBN_demographics_finalsample_202230223.csv")
# final_dem_df <- read.csv("/cbica/projects/network_replication/input/HBN/sample_selection/HBN_demographics_finalsample_202230226.csv")
length(which(final_dem_df$sex=="Female")) # 546 females
CUBIDS_files_func$FilePath[c(which(str_detect(CUBIDS_files_func$variant_info_CUBIDS, "VARIANT")))]
